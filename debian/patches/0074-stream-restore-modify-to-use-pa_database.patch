From 4576196fc6d6c32ef11031427864823168a4a934 Mon Sep 17 00:00:00 2001
From: Juho Hamalainen <jusa@IT-W1767.(none)>
Date: Fri, 3 Jul 2009 14:37:11 +0300
Subject: [PATCH 74/80] stream-restore: modify to use pa_database

---
 src/modules/module-stream-restore.c |  202 +++++++++++++++-------------------
 1 files changed, 89 insertions(+), 113 deletions(-)

diff --git a/src/modules/module-stream-restore.c b/src/modules/module-stream-restore.c
index c477a66..ec1f255 100644
--- a/src/modules/module-stream-restore.c
+++ b/src/modules/module-stream-restore.c
@@ -30,7 +30,6 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <ctype.h>
-#include <gdbm.h>
 
 #include <pulse/xmalloc.h>
 #include <pulse/volume.h>
@@ -50,6 +49,7 @@
 #include <pulsecore/protocol-native.h>
 #include <pulsecore/pstream.h>
 #include <pulsecore/pstream-util.h>
+#include <pulsecore/database.h>
 
 #include "module-stream-restore-symdef.h"
 
@@ -90,7 +90,7 @@ struct userdata {
         *source_output_new_hook_slot,
         *connection_unlink_hook_slot;
     pa_time_event *save_time_event;
-    GDBM_FILE gdbm_file;
+    pa_database *database;
 
     pa_bool_t restore_device:1;
     pa_bool_t restore_volume:1;
@@ -101,7 +101,7 @@ struct userdata {
     pa_idxset *subscribed;
 
     pa_hook_slot *sink_proplist_changed_slot;
-    GDBM_FILE gdbm_route_file;
+    pa_database *route_database;
     char *route;
     pa_cvolume route_volume;
 };
@@ -153,28 +153,28 @@ static int _ignore_rule_hack(const char *name) {
 }
 
 static struct route_entry* read_route_entry(struct userdata *u, const char *route) {
-    datum key, data;
+    pa_datum key, data;
     struct route_entry *e;
 
     pa_assert(u);
     pa_assert(route);
 
-    key.dptr = (char*) route;
-    key.dsize = (int) strlen(route);
+    key.data = (char*) route;
+    key.size = strlen(route);
 
-    data = gdbm_fetch(u->gdbm_route_file, key);
+    memset(&data, 0, sizeof(data));
 
-    if (!data.dptr)
+    if (!pa_database_get(u->route_database, &key, &data))
         goto fail;
 
-    if (data.dsize != sizeof(struct route_entry)) {
+    if (data.size != sizeof(struct route_entry)) {
         /* This is probably just a database upgrade, hence let's not
          * consider this more than a debug message */
-        pa_log_debug("Database contains entry for route %s of wrong size %lu != %lu. Probably due to uprade, ignoring.", route, (unsigned long) data.dsize, (unsigned long) sizeof(struct route_entry));
+        pa_log_debug("Database contains entry for route %s of wrong size %lu != %lu. Probably due to uprade, ignoring.", route, (unsigned long) data.size, (unsigned long) sizeof(struct route_entry));
         goto fail;
     }
 
-    e = (struct route_entry*) data.dptr;
+    e = (struct route_entry*) data.data;
 
     if (e->version != ROUTE_ENTRY_VERSION) {
         pa_log_debug("Version of database entry for route %s doesn't match our version. Probably due to upgrade, ignoring.", route);
@@ -190,14 +190,14 @@ static struct route_entry* read_route_entry(struct userdata *u, const char *rout
 
 fail:
 
-    pa_xfree(data.dptr);
+    pa_xfree(data.data);
     return NULL;
 }
 
 static void route_set_role_volume(struct userdata *u, const char *name) {
     struct entry *old;
     struct entry entry;
-    datum key, data;
+    pa_datum key, data;
 
     pa_assert(u);
     pa_assert(name);
@@ -219,15 +219,15 @@ static void route_set_role_volume(struct userdata *u, const char *name) {
         pa_xfree(old);
     }
 
-    key.dptr = (void*) name;
-    key.dsize = (int) strlen(name);
+    key.data = (void*) name;
+    key.size = (int) strlen(name);
 
-    data.dptr = (void*) &entry;
-    data.dsize = sizeof(entry);
+    data.data = (void*) &entry;
+    data.size = sizeof(entry);
 
     pa_log_info("Storing volume/mute/device for stream %s.", name);
 
-    gdbm_store(u->gdbm_file, key, data, GDBM_REPLACE);
+    pa_database_set(u->database, &key, &data, TRUE);
 
     apply_entry(u, name, &entry);
 }
@@ -282,8 +282,8 @@ static void save_time_callback(pa_mainloop_api*a, pa_time_event* e, pa_usec_t t,
     u->core->mainloop->time_free(u->save_time_event);
     u->save_time_event = NULL;
 
-    gdbm_sync(u->gdbm_file);
-    gdbm_sync(u->gdbm_route_file);
+    pa_database_sync(u->database);
+    pa_database_sync(u->route_database);
 
     pa_log_info("Synced.");
 }
@@ -314,28 +314,28 @@ static char *get_name(pa_proplist *p, const char *prefix) {
 }
 
 static struct entry* read_entry(struct userdata *u, const char *name) {
-    datum key, data;
+    pa_datum key, data;
     struct entry *e;
 
     pa_assert(u);
     pa_assert(name);
 
-    key.dptr = (char*) name;
-    key.dsize = (int) strlen(name);
+    key.data = (char*) name;
+    key.size = (int) strlen(name);
 
-    data = gdbm_fetch(u->gdbm_file, key);
+    memset(&data, 0, sizeof(data));
 
-    if (!data.dptr)
+    if (!pa_database_get(u->database, &key, &data))
         goto fail;
 
-    if (data.dsize != sizeof(struct entry)) {
+    if (data.size != sizeof(struct entry)) {
         /* This is probably just a database upgrade, hence let's not
          * consider this more than a debug message */
-        pa_log_debug("Database contains entry for stream %s of wrong size %lu != %lu. Probably due to uprade, ignoring.", name, (unsigned long) data.dsize, (unsigned long) sizeof(struct entry));
+        pa_log_debug("Database contains entry for stream %s of wrong size %lu != %lu. Probably due to uprade, ignoring.", name, (unsigned long) data.size, (unsigned long) sizeof(struct entry));
         goto fail;
     }
 
-    e = (struct entry*) data.dptr;
+    e = (struct entry*) data.data;
 
     if (e->version != ENTRY_VERSION) {
         pa_log_debug("Version of database entry for stream %s doesn't match our version. Probably due to upgrade, ignoring.", name);
@@ -366,7 +366,7 @@ static struct entry* read_entry(struct userdata *u, const char *name) {
 
 fail:
 
-    pa_xfree(data.dptr);
+    pa_datum_free(&data);
     return NULL;
 }
 
@@ -395,7 +395,7 @@ static void trigger_save(struct userdata *u) {
 
     if (pa_cvolume_valid(&u->route_volume)) {
         struct route_entry entry;
-        datum key, data;
+        pa_datum key, data;
         char t[256];
 
         memset(&entry, 0, sizeof(entry));
@@ -403,13 +403,13 @@ static void trigger_save(struct userdata *u) {
         entry.volume = u->route_volume;
         pa_log_debug("Route %s volume=%s", u->route, pa_cvolume_snprint(t, sizeof(t), &u->route_volume));
 
-        key.dptr = (void*) u->route;
-        key.dsize = (int) strlen(u->route);
+        key.data = (void*) u->route;
+        key.size = (int) strlen(u->route);
 
-        data.dptr = (void*) &entry;
-        data.dsize = sizeof(entry);
+        data.data = (void*) &entry;
+        data.size = sizeof(entry);
 
-        gdbm_store(u->gdbm_route_file, key, data, GDBM_REPLACE);
+        pa_database_set(u->route_database, &key, &data, TRUE);
     }
 
 end:
@@ -449,7 +449,7 @@ static void subscribe_callback(pa_core *c, pa_subscription_event_type_t t, uint3
     struct userdata *u = userdata;
     struct entry entry, *old;
     char *name;
-    datum key, data;
+    pa_datum key, data;
 
     pa_assert(c);
     pa_assert(u);
@@ -525,15 +525,15 @@ static void subscribe_callback(pa_core *c, pa_subscription_event_type_t t, uint3
     if (!_ignore_rule_hack(name) && pa_cvolume_valid(&entry.volume))
         u->route_volume = entry.volume;
 
-    key.dptr = name;
-    key.dsize = (int) strlen(name);
+    key.data = name;
+    key.size = (int) strlen(name);
 
-    data.dptr = (void*) &entry;
-    data.dsize = sizeof(entry);
+    data.data = (void*) &entry;
+    data.size = sizeof(entry);
 
     pa_log_info("Storing volume/mute/device for stream %s.", name);
 
-    gdbm_store(u->gdbm_file, key, data, GDBM_REPLACE);
+    pa_database_set(u->database, &key, &data, TRUE);
 
     pa_xfree(name);
 
@@ -658,25 +658,6 @@ static pa_hook_result_t source_output_new_hook_callback(pa_core *c, pa_source_ou
 
 #define EXT_VERSION 2
 
-static void clear_db(struct userdata *u) {
-    datum key;
-
-    pa_assert(u);
-
-    key = gdbm_firstkey(u->gdbm_file);
-    while (key.dptr) {
-        datum next_key;
-        next_key = gdbm_nextkey(u->gdbm_file, key);
-
-        gdbm_delete(u->gdbm_file, key);
-        pa_xfree(key.dptr);
-
-        key = next_key;
-    }
-
-    gdbm_reorganize(u->gdbm_file);
-}
-
 static int fill_db(struct userdata *u, const char *filename) {
     FILE *f;
     int n = 0;
@@ -722,7 +703,7 @@ static int fill_db(struct userdata *u, const char *filename) {
 
         *d = 0;
         if (pa_atod(v, &db) >= 0) {
-            datum key, data;
+            pa_datum key, data;
             struct entry e;
 
             memset(&e, 0, sizeof(e));
@@ -733,16 +714,16 @@ static int fill_db(struct userdata *u, const char *filename) {
             e.volume_is_absolute = TRUE;
             e.volume_is_absolute_valid = TRUE;
 
-            key.dptr = (void*) ln;
-            key.dsize = (int) strlen(ln);
+            key.data = (void*) ln;
+            key.size = (int) strlen(ln);
 
-            data.dptr = (void*) &e;
-            data.dsize = sizeof(e);
+            data.data = (void*) &e;
+            data.size = sizeof(e);
 
             if (!_ignore_rule_hack(ln) && pa_cvolume_valid(&e.volume))
                 u->route_volume = e.volume;
 
-            if (gdbm_store(u->gdbm_file, key, data, GDBM_INSERT) == 0)
+            if (pa_database_set(u->database, &key, &data, TRUE) == 0)
                 pa_log_debug("Setting %s to %fdb", ln, db);
         }
     }
@@ -835,20 +816,22 @@ static void apply_entry(struct userdata *u, const char *name, struct entry *e) {
     }
 }
 
-#if 0
-static void dump_database(struct userdata *u) {
-    datum key;
+#ifdef DEBUG_VOLUME
+PA_GCC_UNUSED static void stream_restore_dump_database(struct userdata *u) {
+    pa_datum key;
+    pa_bool_t done;
+
+    done = !pa_database_first(u->database, &key, NULL);
 
-    key = gdbm_firstkey(u->gdbm_file);
-    while (key.dptr) {
-        datum next_key;
+    while (!done) {
+        pa_datum next_key;
         struct entry *e;
         char *name;
 
-        next_key = gdbm_nextkey(u->gdbm_file, key);
+        done = !pa_database_next(u->database, &key, &next_key, NULL);
 
-        name = pa_xstrndup(key.dptr, key.dsize);
-        pa_xfree(key.dptr);
+        name = pa_xstrndup(key.data, key.size);
+        pa_datum_free(&key);
 
         if ((e = read_entry(u, name))) {
             char t[256];
@@ -896,21 +879,23 @@ static int extension_cb(pa_native_protocol *p, pa_module *m, pa_native_connectio
         }
 
         case SUBCOMMAND_READ: {
-            datum key;
+            pa_datum key;
+            pa_bool_t done;
 
             if (!pa_tagstruct_eof(t))
                 goto fail;
 
-            key = gdbm_firstkey(u->gdbm_file);
-            while (key.dptr) {
-                datum next_key;
+            done = !pa_database_first(u->database, &key, NULL);
+
+            while (!done) {
+                pa_datum next_key;
                 struct entry *e;
                 char *name;
 
-                next_key = gdbm_nextkey(u->gdbm_file, key);
+                done = !pa_database_next(u->database, &key, &next_key, NULL);
 
-                name = pa_xstrndup(key.dptr, (size_t) key.dsize);
-                pa_xfree(key.dptr);
+                name = pa_xstrndup(key.data, (size_t) key.size);
+                pa_datum_free(&key);
 
                 if ((e = read_entry(u, name))) {
                     pa_cvolume r;
@@ -949,13 +934,13 @@ static int extension_cb(pa_native_protocol *p, pa_module *m, pa_native_connectio
                 goto fail;
 
             if (mode == PA_UPDATE_SET)
-                clear_db(u);
+                pa_database_clear(u->database);
 
             while (!pa_tagstruct_eof(t)) {
                 const char *name, *device;
                 pa_bool_t muted, volume_is_absolute;
                 struct entry entry;
-                datum key, data;
+                pa_datum key, data;
                 pa_cvolume r;
                 int k;
 
@@ -1002,13 +987,13 @@ static int extension_cb(pa_native_protocol *p, pa_module *m, pa_native_connectio
                 if (!_ignore_rule_hack(name) && pa_cvolume_valid(&entry.volume))
                     u->route_volume = entry.volume;
 
-                key.dptr = (void*) name;
-                key.dsize = (int) strlen(name);
+                key.data = (void*) name;
+                key.size = (int) strlen(name);
 
-                data.dptr = (void*) &entry;
-                data.dsize = sizeof(entry);
+                data.data = (void*) &entry;
+                data.size = sizeof(entry);
 
-                if ((k = gdbm_store(u->gdbm_file, key, data, mode == PA_UPDATE_REPLACE ? GDBM_REPLACE : GDBM_INSERT)) == 0)
+                if (pa_database_set(u->database, &key, &data, mode == PA_UPDATE_REPLACE) == 0)
                     if (apply_immediately)
                         apply_entry(u, name, &entry);
             }
@@ -1022,15 +1007,15 @@ static int extension_cb(pa_native_protocol *p, pa_module *m, pa_native_connectio
 
             while (!pa_tagstruct_eof(t)) {
                 const char *name;
-                datum key;
+                pa_datum key;
 
                 if (pa_tagstruct_gets(t, &name) < 0)
                     goto fail;
 
-                key.dptr = (void*) name;
-                key.dsize = (int) strlen(name);
+                key.data = (void*) name;
+                key.size = (int) strlen(name);
 
-                gdbm_delete(u->gdbm_file, key);
+                pa_database_unset(u->database, &key);
             }
 
             trigger_save(u);
@@ -1085,7 +1070,6 @@ int pa__init(pa_module*m) {
     pa_source_output *so;
     uint32_t idx;
     pa_bool_t restore_device = TRUE, restore_volume = TRUE, restore_muted = TRUE, restore_route_volume = TRUE;
-    int gdbm_cache_size;
     const char* ext_supported[] = { "stream-restore-1", "stream-restore-2", NULL };
 
     pa_assert(m);
@@ -1116,7 +1100,7 @@ int pa__init(pa_module*m) {
     u->restore_route_volume = restore_route_volume;
     pa_cvolume_init(&u->route_volume);
 
-    u->gdbm_file = NULL;
+    u->database = NULL;
     u->subscribed = pa_idxset_new(pa_idxset_trivial_hash_func, pa_idxset_trivial_compare_func);
 
     u->protocol = pa_native_protocol_get(m->core);
@@ -1142,46 +1126,38 @@ int pa__init(pa_module*m) {
      * files are CPU dependant, and we don't want things to go wrong
      * if we are on a multiarch system. */
 
-    fn = pa_sprintf_malloc("stream-volumes."CANONICAL_HOST".gdbm");
+    fn = pa_sprintf_malloc("stream-volumes."CANONICAL_HOST".bin");
     fname = pa_state_path(fn, TRUE);
     pa_xfree(fn);
 
     if (!fname)
         goto fail;
 
-    if (!(u->gdbm_file = gdbm_open(fname, 0, GDBM_WRCREAT|GDBM_NOLOCK, 0600, NULL))) {
-        pa_log("Failed to open volume database '%s': %s", fname, gdbm_strerror(gdbm_errno));
+    if (!(u->database = pa_database_open(fname, TRUE))) {
+        pa_log("Failed to open volume database '%s': %s", fname, pa_cstrerror(errno));
         pa_xfree(fname);
         goto fail;
     }
 
-    /* By default the cache of gdbm is rather large, let's reduce it a bit to save memory */
-    gdbm_cache_size = 10;
-    gdbm_setopt(u->gdbm_file, GDBM_CACHESIZE, &gdbm_cache_size, sizeof(gdbm_cache_size));
-
     pa_log_info("Sucessfully opened database file '%s'.", fname);
     pa_xfree(fname);
 
     if (fill_db(u, pa_modargs_get_value(ma, "fallback_table", NULL)) < 0)
         goto fail;
 
-    fn = pa_sprintf_malloc("x-maemo-route-volumes."CANONICAL_HOST".gdbm");
+    fn = pa_sprintf_malloc("x-maemo-route-volumes."CANONICAL_HOST".bin");
     fname = pa_state_path(fn, TRUE);
     pa_xfree(fn);
 
     if (!fname)
         goto fail;
 
-    if (!(u->gdbm_route_file = gdbm_open(fname, 0, GDBM_WRCREAT|GDBM_NOLOCK, 0600, NULL))) {
-        pa_log("Failed to open volume database '%s': %s", fname, gdbm_strerror(gdbm_errno));
+    if (!(u->route_database = pa_database_open(fname, TRUE))) {
+        pa_log("Failed to open volume database '%s': %s", fname, pa_cstrerror(errno));
         pa_xfree(fname);
         goto fail;
     }
 
-    /* By default the cache of gdbm is rather large, let's reduce it a bit to save memory */
-    gdbm_cache_size = 10;
-    gdbm_setopt(u->gdbm_route_file, GDBM_CACHESIZE, &gdbm_cache_size, sizeof(gdbm_cache_size));
-
     pa_log_info("Sucessfully opened database file '%s'.", fname);
     pa_xfree(fname);
 
@@ -1229,11 +1205,11 @@ void pa__done(pa_module*m) {
     if (u->save_time_event)
         u->core->mainloop->time_free(u->save_time_event);
 
-    if (u->gdbm_file)
-        gdbm_close(u->gdbm_file);
+    if (u->database)
+        pa_database_close(u->database);
 
-    if (u->gdbm_route_file)
-        gdbm_close(u->gdbm_route_file);
+    if (u->route_database)
+        pa_database_close(u->route_database);
 
     if (u->protocol) {
         pa_native_protocol_remove_ext(u->protocol, m);
-- 
1.6.3.3

