From 2079c2ab92804c55d71f44d7a1255ef1809c28cd Mon Sep 17 00:00:00 2001
From: Jyri Sarha <jyri.sarha@nokia.com>
Date: Mon, 25 Aug 2008 18:51:01 +0300
Subject: [PATCH 12/26] alsa-sink: fix the busy loop on arm (Nokia specific)

---
 src/modules/alsa/alsa-sink.c        |   12 ++++++++++--
 src/modules/alsa/module-alsa-sink.c |    3 ++-
 2 files changed, 12 insertions(+), 3 deletions(-)

diff --git a/src/modules/alsa/alsa-sink.c b/src/modules/alsa/alsa-sink.c
index f092b5d..8d01e6d 100644
--- a/src/modules/alsa/alsa-sink.c
+++ b/src/modules/alsa/alsa-sink.c
@@ -100,6 +100,7 @@ struct userdata {
     uint64_t since_start;
 
     snd_pcm_sframes_t hwbuf_unused_frames;
+    snd_pcm_sframes_t hwbuf_min_frames_to_write;
 };
 
 static void userdata_free(struct userdata *u);
@@ -249,7 +250,7 @@ static int mmap_write(struct userdata *u, pa_usec_t *sleep_usec, pa_bool_t polle
                 pa_bytes_to_usec(left_to_play, &u->sink->sample_spec) > process_usec+max_sleep_usec/2)
                 break;
 
-        if (PA_UNLIKELY(n <= u->hwbuf_unused_frames)) {
+        if (PA_UNLIKELY(n <= u->hwbuf_min_frames_to_write || n <= u->hwbuf_unused_frames)) {
 
             if (polled)
                 pa_log("ALSA woke us up to write new data to the device, but there was actually nothing to write! "
@@ -372,7 +373,7 @@ static int unix_write(struct userdata *u, pa_usec_t *sleep_usec, pa_bool_t polle
                 pa_bytes_to_usec(left_to_play, &u->sink->sample_spec) > process_usec+max_sleep_usec/2)
                 break;
 
-        if (PA_UNLIKELY(n <= u->hwbuf_unused_frames)) {
+        if (PA_UNLIKELY(n <= u->hwbuf_min_frames_to_write || n <= u->hwbuf_unused_frames)) {
 
             if (polled)
                 pa_log("ALSA woke us up to write new data to the device, but there was actually nothing to write! "
@@ -1250,6 +1251,7 @@ pa_sink *pa_alsa_sink_new(pa_module *m, pa_modargs *ma, const char*driver, pa_ca
     pa_bool_t use_mmap = TRUE, b, use_tsched = TRUE, d;
     pa_usec_t usec;
     pa_sink_new_data data;
+    int32_t hwbuf_min_frames_to_write = 0;
 
     snd_pcm_info_alloca(&pcm_info);
 
@@ -1298,6 +1300,11 @@ pa_sink *pa_alsa_sink_new(pa_module *m, pa_modargs *ma, const char*driver, pa_ca
         use_tsched = FALSE;
     }
 
+    if (pa_modargs_get_value_s32(ma, "hwbuf_min_frames_to_write", &hwbuf_min_frames_to_write) < 0) {
+        pa_log("Failed to parse hwbuf_min_frames_to_write argument");
+        goto fail;
+    }
+
     u = pa_xnew0(struct userdata, 1);
     u->core = m->core;
     u->module = m;
@@ -1466,6 +1473,7 @@ pa_sink *pa_alsa_sink_new(pa_module *m, pa_modargs *ma, const char*driver, pa_ca
     u->fragment_size = frag_size = (uint32_t) (period_frames * frame_size);
     u->nfragments = nfrags;
     u->hwbuf_size = u->fragment_size * nfrags;
+    u->hwbuf_min_frames_to_write = hwbuf_min_frames_to_write;
     u->hwbuf_unused_frames = 0;
     u->tsched_watermark = tsched_watermark;
     u->frame_index = 0;
diff --git a/src/modules/alsa/module-alsa-sink.c b/src/modules/alsa/module-alsa-sink.c
index 6cf48b5..83f93b3 100644
--- a/src/modules/alsa/module-alsa-sink.c
+++ b/src/modules/alsa/module-alsa-sink.c
@@ -51,7 +51,8 @@ PA_MODULE_USAGE(
         "mmap=<enable memory mapping?> "
         "tsched=<enable system timer based scheduling mode?> "
         "tsched_buffer_size=<buffer size when using timer based scheduling> "
-        "tsched_buffer_watermark=<lower fill watermark>");
+        "tsched_buffer_watermark=<lower fill watermark> "
+        "hwbuf_min_frames_to_write=<minimum number of available frames in hwbuf to fill>");
 
 static const char* const valid_modargs[] = {
     "name",
-- 
1.6.1.224.gb56c

