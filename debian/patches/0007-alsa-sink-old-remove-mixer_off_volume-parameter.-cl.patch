From f486da79cee01bd1c8932b1e3766112236c31303 Mon Sep 17 00:00:00 2001
From: Juho Hamalainen <ext-juho.hamalainen@nokia.com>
Date: Tue, 3 Mar 2009 15:06:46 +0200
Subject: [PATCH 07/49] alsa-sink-old: remove mixer_off_volume parameter. clean up and update logging.

---
 src/modules/alsa/module-alsa-sink-old.c |  184 ++++++++-----------------------
 1 files changed, 45 insertions(+), 139 deletions(-)

diff --git a/src/modules/alsa/module-alsa-sink-old.c b/src/modules/alsa/module-alsa-sink-old.c
index a48649c..96c5390 100644
--- a/src/modules/alsa/module-alsa-sink-old.c
+++ b/src/modules/alsa/module-alsa-sink-old.c
@@ -69,7 +69,6 @@ PA_MODULE_USAGE(
         "rate=<sample rate> "
         "mixer=<initial ALSA mixer> "
         "mixer_load=<load mixer controls in startup> "
-        "mixer_off_volume=<mixer level when it isn't used> "
         "fragments=<number of fragments> "
         "fragment_size=<fragment size> "
         "alt_fragments=<number of fragments> "
@@ -143,7 +142,6 @@ struct userdata {
     PA_LLIST_HEAD(struct mixer_control_t, mixer_list);
     struct mixer_control_t *active_mixer;
     pa_channel_map channel_map;
-    pa_cvolume mixer_off_volume;
 
     pa_hook_slot *sink_proplist_changed_slot;
 
@@ -178,7 +176,6 @@ static const char* const valid_modargs[] = {
     "rate",
     "mixer",
     "mixer_load",
-    "mixer_off_volume",
     "fragments",
     "fragment_size",
     "alt_fragments",
@@ -1028,15 +1025,6 @@ static void thread_func(void *userdata) {
     pa_log_debug("Thread shutting down");
 }
 
-static void mute_all_mixers(struct userdata *u) {
-    struct mixer_control_t *m = NULL;
-    pa_assert(u);
-    pa_assert(u->mixer_off_volume.channels > 0);
-    for (m = u->mixer_list; m; m = m->next) {
-        set_alsa_mixer_volumes(u, m, &u->mixer_off_volume);
-    }
-}
-
 static struct mixer_control_t* get_mixer_elem_by_name(struct userdata *u, const char *mixer) {
     struct mixer_control_t *m = NULL;
 
@@ -1049,7 +1037,6 @@ static struct mixer_control_t* get_mixer_elem_by_name(struct userdata *u, const
 }
 
 static int set_mixer_elem_by_name(struct userdata *u, const char *mixer) {
-    pa_bool_t found = FALSE;
     struct mixer_control_t *m = NULL;
 
     m = get_mixer_elem_by_name(u, mixer);
@@ -1263,6 +1250,7 @@ static void free_mixer_elements(struct userdata *u) {
     }
 }
 
+/* TODO: is this deprecated? */
 static int update_mixer_gain_steps(struct userdata *u,
                                    struct mixer_control_t *m,
                                    const char *step_list,
@@ -1312,64 +1300,6 @@ static int update_mixer_gain_steps(struct userdata *u,
     return 1;
 }
 
-#if 0 /* DELETE */
-static int switch_mixer(struct userdata *u, const char *mixer_str) {
-    struct mixer_control_t *prev_mixer = NULL;
-    int ret = 0;
-
-    if (u->active_mixer && strcmp(mixer_str, u->active_mixer->name) == 0) {
-        return 0;
-    }
-
-    pa_log_info("select mixer: %s", mixer_str);
-
-    prev_mixer = u->active_mixer;
-
-    /* store volumes from currently active mixer */
-    if (prev_mixer) {
-        prev_mixer->cache_volume = *pa_sink_get_volume(u->sink, TRUE);
-        prev_mixer->cache_muted = pa_sink_get_mute(u->sink, TRUE);
-    }
-
-    if (prev_mixer && u->mixer_off_volume.channels > 0) {
-        set_alsa_mixer_volumes(u, u->active_mixer, &u->mixer_off_volume);
-    }
-
-    if (set_mixer_elem_by_name(u, mixer_str)) {
-        /* couldn't select mixer, try to load that mixer element */
-        if (get_mixer_elements(u, mixer_str) > 0) {
-            /* new mixer element loaded, try selecting again */
-            if (set_mixer_elem_by_name(u, mixer_str)) {
-                pa_log_error("%s: cannot load new mixer control %s", u->device_name, mixer_str);
-
-                /* restore old mixer volumes, if necessary */
-                if (prev_mixer && u->mixer_off_volume.channels > 0) {
-                    pa_sink_set_volume(u->sink, &prev_mixer->cache_volume, TRUE, TRUE);
-                    pa_sink_set_mute(u->sink, &prev_mixer->cache_muted);
-                }
-
-                ret = 1;
-            }
-        } else
-            ret = 1;
-
-    } else {
-        /* update previously stored volumes to sink */
-
-        if (u->active_mixer->cache_volume.channels > 0) {
-            pa_sink_set_volume(u->sink, &u->active_mixer->cache_volume, TRUE, TRUE);
-            pa_sink_set_mute(u->sink, u->active_mixer->cache_muted);
-        } else {
-            /* no previously stored volumes, update volume from hw */
-            pa_sink_get_volume(u->sink, TRUE);
-            pa_sink_get_mute(u->sink, TRUE);
-        }
-    }
-
-    return ret;
-}
-#endif
-
 static void set_vol(pa_cvolume *vol, const int channels, pa_volume_t value) {
     int ii;
     vol->channels = channels;
@@ -1378,34 +1308,34 @@ static void set_vol(pa_cvolume *vol, const int channels, pa_volume_t value) {
     }
 }
 
+/** Set mixer state using colon separated MIXER:STATE pair.
+ */
 static int set_mixer_value(struct userdata *u, const char *value_str) {
-    int ret = 1;
+    int ret = 0;
     struct mixer_control_t *m = NULL;
     const char *state = NULL;
     char *str;
     char *mixer = NULL;
     char *value = NULL;
     pa_cvolume vol;
-    pa_bool_t muted;
 
     while ((str = pa_split(value_str, ":", &state))) {
         if (str) {
             if (!mixer)
-                mixer = pa_xstrdup(str);
+                mixer = str;
             else if (!value)
-                value = pa_xstrdup(str);
-            pa_xfree(str);
+                value = str;
+            else
+                pa_xfree(str);
         }
     }
 
     if (mixer && value) {
-        pa_log("%s: mixer %s", u->device_name, mixer);
-        pa_log("%s: value %s", u->device_name, value);
 
         if (strcmp(value, PA_ALSA_SINK_PROP_MIXER_OFF) == 0) {
-            pa_log("set to off");
             m = get_mixer_elem_by_name(u, mixer);
             if (m) {
+                pa_log_info("%s: set mixer %s off", u->device_name, mixer);
                 if (m->hw_dB_supported)
                     set_vol(&vol, u->sink->channel_map.channels, pa_sw_volume_from_dB(m->hw_dB_min));
                 else
@@ -1413,18 +1343,17 @@ static int set_mixer_value(struct userdata *u, const char *value_str) {
                 set_alsa_mixer_volumes(u, m, &vol);
             }
         } else if (strcmp(value, PA_ALSA_SINK_PROP_MIXER_MAX) == 0) {
-            pa_log("set to max");
             m = get_mixer_elem_by_name(u, mixer);
             if (m) {
+                pa_log_info("%s: set mixer %s max", u->device_name, mixer);
                 if (m->hw_dB_supported)
-                    set_vol(&vol, u->sink->channel_map.channels, pa_sw_volume_from_dB(m->hw_dB_max));
+                    set_vol(&vol, u->sink->channel_map.channels, pa_sw_volume_from_dB(- m->hw_dB_max/100.0));
                 else
                     set_vol(&vol, u->sink->channel_map.channels, from_alsa_volume(u, m->hw_volume_max));
-
                 set_alsa_mixer_volumes(u, m, &vol);
             }
         } else if (strcmp(value, PA_ALSA_SINK_PROP_MIXER_CONTROL) == 0) {
-            pa_log("set to active_mixer");
+            pa_log_info("%s: set mixer %s active", u->device_name, mixer);
             if (set_mixer_elem_by_name(u, mixer)) {
                 /* couldn't select mixer, try to load that mixer element */
                 if (get_mixer_elements(u, mixer) > 0) {
@@ -1437,9 +1366,14 @@ static int set_mixer_value(struct userdata *u, const char *value_str) {
                 }
             }
 
-        } /* eo strcmp*/
+        } else {
+            pa_log_error("%s: bad mixer setup pair (%s)", u->device_name, value_str);
+            ret = 1;
+        }
 
-        ret = 0;
+    } else {
+        pa_log_error("%s: bad mixer setup pair (%s)", u->device_name, value_str);
+        ret = 1;
     }
 
     if (mixer)
@@ -1450,13 +1384,16 @@ static int set_mixer_value(struct userdata *u, const char *value_str) {
     return ret;
 }
 
-static int set_mixer_values(struct userdata *u, const char *value_list) {
+/** Parse mixer control list.
+ *
+ * Parses comma separated list of MIXER:STATE pairs.
+ */
+static int update_mixer_setup(struct userdata *u, const char *value_list) {
     int ret = 0;
     const char *state = NULL;
-
-    unsigned i = 0;
     char *value;
-    unsigned num;
+
+    pa_log_info("%s: update mixer setup", u->device_name);
 
     /* store volumes from currently active mixer */
     if (u->active_mixer) {
@@ -1466,22 +1403,22 @@ static int set_mixer_values(struct userdata *u, const char *value_list) {
 
     while ((value = pa_split(value_list, ",", &state))) {
         if (value) {
-            pa_log("%s: set_mixer_values %s", u->device_name, value);
             set_mixer_value(u, value);
             pa_xfree(value);
         }
     }
 
     /* update previously stored volumes to sink */
-    if (u->active_mixer && u->active_mixer->cache_volume.channels > 0) {
-        pa_log("%s: update previously stored volumes", u->device_name);
-        pa_sink_set_volume(u->sink, &u->active_mixer->cache_volume, TRUE, TRUE);
-        pa_sink_set_mute(u->sink, u->active_mixer->cache_muted);
-    } else {
-        /* no previously stored volumes, update volume from hw */
-        pa_log("%s: no previously stored volumes, update volume from hw", u->device_name);
-        pa_sink_get_volume(u->sink, TRUE);
-        pa_sink_get_mute(u->sink, TRUE);
+    if (u->active_mixer) {
+        pa_log_info("%s: update stored volumes to sink", u->device_name);
+        if (u->active_mixer->cache_volume.channels > 0) {
+            pa_sink_set_volume(u->sink, &u->active_mixer->cache_volume, TRUE, TRUE);
+            pa_sink_set_mute(u->sink, u->active_mixer->cache_muted);
+        } else {
+            /* no previously stored volumes, update volume from hw */
+            pa_sink_get_volume(u->sink, TRUE);
+            pa_sink_get_mute(u->sink, TRUE);
+        }
     }
 
     return ret;
@@ -1514,23 +1451,12 @@ static pa_hook_result_t sink_proplist_changed_hook_callback(pa_core *c, pa_sink
         }
     }
 
-#if 0  /* DELETE */
-    v = pa_proplist_gets(s->proplist, PA_ALSA_SINK_PROP_MIXER);
-    if (v) {
-        if (switch_mixer(u, v)) {
-            /* set correct mixer name to properties */
-            if (u->active_mixer)
-                pa_proplist_sets(s->proplist, PA_ALSA_SINK_PROP_MIXER, u->active_mixer->name);
-        }
-    }
-#endif
-
     v = pa_proplist_gets(s->proplist, PA_ALSA_SINK_PROP_MIXER);
     if (v) {
-        pa_log("%s: set static mixer values", u->device_name);
-        set_mixer_values(u, v);
+        update_mixer_setup(u, v);
     }
 
+    /* TODO: is this deprecated? */
     if (u->active_mixer) {
         v = pa_proplist_gets(s->proplist, u->active_mixer->prop_mixer_gain_step_count);
         if (v) {
@@ -1715,11 +1641,12 @@ static void load_default_mixer_volumes(struct userdata *u) {
     pa_log_info("%s: set hw_volume_max*0.95 to all mixers", u->device_name);
     for (m = u->mixer_list; m; m = m->next) {
         m->cache_volume.channels = u->sink->channel_map.channels;
-        for (ii = 0; ii < m->cache_volume.channels; ii++)
+        for (ii = 0; ii < m->cache_volume.channels; ii++) {
             if (m->hw_dB_supported)
-                m->cache_volume.values[ii] = pa_sw_volume_from_dB(m->hw_dB_max);
+                m->cache_volume.values[ii] = pa_sw_volume_from_dB(- m->hw_dB_max/100.0)*0.95;
             else
                 m->cache_volume.values[ii] = from_alsa_volume(u, m->hw_volume_max*0.95);
+        }
         m->cache_muted = FALSE;
     }
 }
@@ -1758,8 +1685,6 @@ int pa__init(pa_module*m) {
     pa_channel_map map;
     char *alsa_mixer = NULL;
     char *mixer_load = NULL;
-    uint32_t mixer_off_volume_u;
-    long mixer_off_volume;
     uint32_t nfrags, frag_size;
     uint32_t alt_nfrags, alt_frag_size;
     snd_pcm_uframes_t period_size;
@@ -1775,7 +1700,6 @@ int pa__init(pa_module*m) {
     pa_bool_t use_mmap = TRUE, b, d;
     pa_sink_new_data data;
     const pa_alsa_profile_info *profile;
-    unsigned i;
     pa_bool_t ignore_dB = FALSE;
     int mixer_count = 0;
 
@@ -1811,14 +1735,6 @@ int pa__init(pa_module*m) {
         mixer_load = pa_xstrdup(alsa_mixer);
     }
 
-    mixer_off_volume = -1; /* Default to mixer_off_volume disabled */
-    if (pa_modargs_get_value_u32(ma, "mixer_off_volume", &mixer_off_volume_u) < 0) {
-        pa_log("Failed to parse mixer_off_volume");
-        goto fail;
-    } else {
-        mixer_off_volume = mixer_off_volume_u;
-    }
-
     frame_size = pa_frame_size(&ss);
 
     nfrags = m->core->default_n_fragments;
@@ -1860,13 +1776,6 @@ int pa__init(pa_module*m) {
         u->switching_enabled = TRUE;
     else
         u->switching_enabled = FALSE;
-    if (mixer_off_volume > -1) {
-        for (i = 0; i < map.channels; i++)
-            u->mixer_off_volume.values[i] = mixer_off_volume;
-        u->mixer_off_volume.channels = map.channels;
-    } else {
-        u->mixer_off_volume.channels = 0;
-    }
     u->core = m->core;
     u->module = m;
     m->userdata = u;
@@ -2074,15 +1983,12 @@ int pa__init(pa_module*m) {
             load_default_mixer_volumes(u);
     }
 
-    /* DELETE
-    if (mixer_count > 0 && u->mixer_off_volume.channels > 0)
-        mute_all_mixers(u);
-    */
-
     set_mixer_elem_by_name(u, alsa_mixer);
 
     if (u->active_mixer) {
-        pa_proplist_sets(u->sink->proplist, PA_ALSA_SINK_PROP_MIXER, u->active_mixer->name);
+        char *tmp = pa_sprintf_malloc("%s:%s", u->active_mixer->name, PA_ALSA_SINK_PROP_MIXER_CONTROL);
+        pa_proplist_sets(u->sink->proplist, PA_ALSA_SINK_PROP_MIXER, tmp);
+        pa_xfree(tmp);
         pa_log_debug("%s: update active mixer volume", u->device_name);
         pa_sink_set_volume(u->sink, &u->active_mixer->cache_volume, TRUE, TRUE);
         pa_sink_set_mute(u->sink, u->active_mixer->cache_muted);
@@ -2125,7 +2031,7 @@ void pa__done(pa_module*m) {
     if (u->sink_proplist_changed_slot)
         pa_hook_slot_free(u->sink_proplist_changed_slot);
 
-    if (u->cache_volumes || u->mixer_off_volume.channels > 0)
+    if (u->cache_volumes)
         store_mixer_volumes(u);
 
     if (u->mixer_list)
-- 
1.6.2.rc1.13.gfd76c.dirty

