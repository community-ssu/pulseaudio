From 79489f6b10f595e3dd15e5b0bb8f62d5310bb9d0 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Marc-Andr=C3=A9=20Lureau?= <marc-andre.lureau@nokia.com>
Date: Tue, 9 Jun 2009 12:08:43 +0300
Subject: [PATCH 67/68] volume: remove the cruft

---
 src/modules/alsa/module-alsa-sink-volume.c |  282 +---------------------------
 1 files changed, 1 insertions(+), 281 deletions(-)

diff --git a/src/modules/alsa/module-alsa-sink-volume.c b/src/modules/alsa/module-alsa-sink-volume.c
index 53dca38..3c080e3 100644
--- a/src/modules/alsa/module-alsa-sink-volume.c
+++ b/src/modules/alsa/module-alsa-sink-volume.c
@@ -78,8 +78,6 @@ static const char* const valid_modargs[] = {
     NULL
 };
 
-//#define DEPRECATED_VOLUME
-
 /* Update mixer states,
  * max       0dB
  * off       mute
@@ -125,13 +123,6 @@ const char *PROP_MIXER_TUNING[2] = {
 
 #define MAX_TUNING_TABLES (2)
 
-#ifdef DEPRECATED_VOLUME
-/* String with single integer defining current default volume.
- * If property is not defined, hard coded default volume is
- * used. */
-#define PROP_MIXER_DEFAULT_VOLUME "x-maemo.alsa_sink.default_volume"
-#endif
-
 /* from Nokia modules */
 #define XMAEMO_MODE "x-maemo.mode"
 
@@ -172,12 +163,6 @@ typedef struct mixer_control_t {
 
     struct slave_mixer_t **slaves;
 
-#ifdef DEPRECATED_VOLUME
-    /* store mixer volumes when mixer not in use */
-    pa_cvolume cache_volume;
-    pa_bool_t cache_muted;
-#endif
-
     PA_LLIST_FIELDS(struct mixer_control_t);
 } mixer_control_t;
 
@@ -218,13 +203,6 @@ struct userdata {
 
     pa_bool_t sw_vol_compensation;
 
-#ifdef DEPRECATED_VOLUME
-    /* store mixer volumes */
-    GDBM_FILE gdbm_file;
-    pa_bool_t cache_volumes;
-    /* default mixer dB value */
-    int default_volume;
-#endif
     pa_bool_t mixers_initialized;
 
     /* current audio mode */
@@ -240,14 +218,6 @@ struct userdata {
 
 static struct userdata *global_userdata = NULL;
 
-#define ENTRY_VERSION 1
-
-struct entry {
-    uint8_t version;
-    pa_bool_t muted:1;
-    pa_cvolume volume;
-} PA_GCC_PACKED;
-
 static void replace_chars(char *str, const char c, const char new_c) {
     int ii = -1;
     pa_assert(str);
@@ -678,7 +648,7 @@ static void sink_set_volume_cb(pa_sink *s) {
     if (u->active_mixer->slaves) {
         pa_log_error("SET SLAVE VOLUMES NOT IMPLEMENTED");
     }
-    
+
     if (!u->active_mixer->tuning_data[u->active_tuning].tuning_table_filled) {
         load_mixer_tuning(u, u->active_mixer, u->active_tuning);
         if (!u->active_mixer->tuning_data[u->active_tuning].tuning_table_filled) {
@@ -1148,11 +1118,6 @@ static int set_mixer_state(struct userdata *u, const char *value_str) {
     return ret;
 }
 
-#ifdef DEPRECATED_VOLUME
-static void store_active_mixer_volume(struct userdata *u);
-static void load_mixer_volume(struct userdata *u, struct mixer_control_t *m);
-#endif
-
 /** Parse mixer control list.
  *
  * Parses comma separated list of MIXER:STATE pairs.
@@ -1184,20 +1149,6 @@ static int update_mixer_setup(struct userdata *u, const char *value_list) {
         pa_log_warn("Setting mixer state for %d mixers failed", ret);
     }
 
-#ifdef DEPRECATED_VOLUME
-    /* update previously stored volumes to sink */
-    if (u->active_mixer) {
-        /* mixer volume has to be loaded from gdbm every time mixer setup changes,
-         * since same mixer can be in control in multiple audio modes. */
-        load_mixer_volume(u, u->active_mixer);
-        pa_sink_set_volume(u->sink, &u->active_mixer->cache_volume, TRUE, TRUE, TRUE);
-        pa_sink_set_mute(u->sink, u->active_mixer->cache_muted);
-    } else {
-        pa_log_error("No active mixer, THIS IS BAD!");
-        ret = -1;
-    }
-#endif
-
     if (u->active_mixer) {
         log_spam("update mixer volume (vol was %d) sink->refresh_volume %d", vol->values[0], u->sink->refresh_volume);
         //pa_sink_set_volume(u->sink, vol, FALSE,FALSE,FALSE);
@@ -1219,13 +1170,6 @@ static pa_hook_result_t sink_proplist_changed_hook_callback(pa_core *c, pa_sink
     pa_assert(u);
     pa_assert(s);
 
-#ifdef DEPRECATED_VOLUME
-    /* store/read values only after we have properties loaded */
-    if (u->audio_mode)
-        /* store volumes from currently active mixer */
-        store_active_mixer_volume(u);
-#endif
-
     v = pa_proplist_gets(s->proplist, XMAEMO_MODE);
     if (v) {
         if (u->audio_mode) {
@@ -1244,20 +1188,6 @@ static pa_hook_result_t sink_proplist_changed_hook_callback(pa_core *c, pa_sink
             u->audio_mode = pa_xstrdup(v);
     }
 
-#ifdef DEPRECATED_VOLUME
-    if (u->audio_mode) {
-        v = pa_proplist_gets(s->proplist, PROP_MIXER_DEFAULT_VOLUME);
-        if (v) {
-            if (!pa_atoi(v, &tmp)) {
-                u->default_volume = tmp;
-                log_spam("using %d as default_volume", u->default_volume);
-            }
-        } else {
-            u->default_volume = DEFAULT_MIXER_DB_VALUE_ON_FIRST_BOOT;
-        }
-    }
-#endif
-
     v = pa_proplist_gets(s->proplist, PROP_MIXER_TUNING_MODE);
     if (v) {
         if (!pa_atoi(v, &tmp)) {
@@ -1287,188 +1217,6 @@ static pa_hook_result_t sink_proplist_changed_hook_callback(pa_core *c, pa_sink
     return PA_HOOK_OK;
 }
 
-#ifdef DEPRECATED_VOLUME
-static int init_volume_cache(struct userdata *u) {
-    char *fn;
-    char *fname;
-    int gdbm_cache_size;
-
-    /* We include the host identifier in the file name because gdbm
-     * files are CPU dependant, and we don't want things to go wrong
-     * if we are on a multiarch system. */
-
-    fn = pa_sprintf_malloc("%s:mixer-volumes."CANONICAL_HOST".gdbm", u->device_name);
-    fname = pa_state_path(fn, TRUE);
-    pa_xfree(fn);
-
-    if (!fname)
-        return 1;
-
-    if (!(u->gdbm_file = gdbm_open(fname, 0, GDBM_WRCREAT|GDBM_NOLOCK, 0600, NULL))) {
-        pa_log_error("Failed to open volume database '%s': %s", fname, gdbm_strerror(gdbm_errno));
-        pa_xfree(fname);
-        return 1;
-    }
-
-    /* By default the cache of gdbm is rather large, let's reduce it a bit to save memory */
-    gdbm_cache_size = 10;
-    gdbm_setopt(u->gdbm_file, GDBM_CACHESIZE, &gdbm_cache_size, sizeof(gdbm_cache_size));
-
-    pa_log_info("%s: Sucessfully opened database file '%s'.", u->device_name, fname);
-    pa_xfree(fname);
-
-    u->cache_volumes = TRUE;
-
-    return 0;
-}
-#endif
-
-#ifdef DEPRECATED_VOLUME
-static char* get_gdbm_key(struct userdata *u, struct mixer_control_t *m) {
-    pa_assert(u);
-    pa_assert(u->audio_mode);
-    return pa_sprintf_malloc("%s-%s", u->audio_mode, m->name);
-}
-#endif
-
-#ifdef DEPRECATED_VOLUME
-static struct entry* read_entry(struct userdata *u, struct mixer_control_t *m) {
-    datum key, data;
-    struct entry *e;
-    char *name = NULL;
-
-    pa_assert(u);
-    pa_assert(m);
-
-    name = get_gdbm_key(u, m);
-
-    key.dptr = (char*) name;
-    key.dsize = (int) strlen(name);
-
-    data = gdbm_fetch(u->gdbm_file, key);
-
-    if (!data.dptr)
-        goto fail;
-
-    if (data.dsize != sizeof(struct entry)) {
-        pa_log_debug("Database contains entry for device %s of wrong size %lu != %lu. Probably due to upgrade, ignoring.", name, (unsigned long) data.dsize, (unsigned long) sizeof(struct entry));
-        goto fail;
-    }
-
-    e = (struct entry*) data.dptr;
-
-    if (e->version != ENTRY_VERSION) {
-        pa_log_debug("Version of database entry for device %s doesn't match our version. Probably due to upgrade, ignoring.", name);
-        goto fail;
-    }
-
-    if (!(pa_cvolume_valid(&e->volume))) {
-        pa_log_warn("Invalid volume stored in database for device %s", name);
-        goto fail;
-    }
-
-    pa_xfree(name);
-
-    return e;
-
-fail:
-
-    pa_xfree(name);
-    pa_xfree(data.dptr);
-    return NULL;
-}
-#endif
-
-#ifdef DEPRECATED_VOLUME
-/* TODO: I don't think the active mixer name should be the key for stored volume,
-   audio mode ("x-maemo.mode") would serve purpose much better. */
-static int store_mixer_volume(struct userdata *u, struct mixer_control_t *m) {
-    struct entry entry;
-    char *name;
-    datum key, data;
-
-    pa_assert(u);
-    pa_assert(m);
-
-    memset(&entry, 0, sizeof(entry));
-    entry.version = ENTRY_VERSION;
-
-    name = get_gdbm_key(u, m);
-
-    entry.volume = m->cache_volume;
-    entry.muted = m->cache_muted;
-
-    key.dptr = name;
-    key.dsize = (int)strlen(name);
-
-    data.dptr = (void*) &entry;
-    data.dsize = sizeof(entry);
-
-    gdbm_store(u->gdbm_file, key, data, GDBM_REPLACE);
-
-    pa_xfree(name);
-
-    return 0;
-}
-#endif
-
-#ifdef DEPRECATED_VOLUME
-/** Load mixer values from gdbm.
- *
- */
-static void load_mixer_volume(struct userdata *u, struct mixer_control_t *m) {
-    struct entry *entry = NULL;
-    pa_assert(u);
-    pa_assert(u->sink);
-
-    /* don't allow reading entry, if audio mode is not set */
-    if (u->cache_volumes && u->audio_mode)
-        entry = read_entry(u, m);
-
-    if (entry && entry->volume.channels > 0) {
-        m->cache_volume = entry->volume;
-        m->cache_muted = entry->muted;
-        pa_log_info("%s: load volume for mixer %s: %d", u->device_name, m->name, m->cache_volume.values[0]);
-    } else {
-        /* Use default value if we have nothing in cache. */
-        pa_log_info("Value for mixer %s not found from cache, using default values.", m->name);
-        pa_cvolume_set(&m->cache_volume, u->sink->sample_spec.channels,
-                pa_sw_volume_from_dB(u->default_volume));
-        m->cache_muted = FALSE;
-    }
-
-    if (entry)
-        pa_xfree(entry);
-}
-#endif
-
-#ifdef DEPRECATED_VOLUME
-static void store_active_mixer_volume(struct userdata *u) {
-    struct mixer_control_t *m = u->active_mixer;
-    pa_assert(u);
-
-    if (!m) {
-        pa_log_warn("No active mixer, nothing to store");
-        return;
-    }
-
-    if (!u->sink) {
-        pa_log_debug("The sink was already unloaded, storing cached values");
-    }
-    else {
-        m->cache_volume = *pa_sink_get_volume(u->sink, TRUE, FALSE);
-        m->cache_muted = pa_sink_get_mute(u->sink, TRUE);
-    }
-
-    if (u->cache_volumes) {
-        store_mixer_volume(u, m);
-        /* sync immediately */
-        gdbm_sync(u->gdbm_file);
-        pa_log_info("%s: Synced.", u->device_name);
-    }
-}
-#endif
-
 static pa_hook_result_t sink_unlink_hook_callback(pa_core *c, pa_sink *s, struct userdata *u) {
     if (s != u->sink)
         return PA_HOOK_OK;
@@ -1554,11 +1302,6 @@ int pa__init(pa_module*m) {
         goto fail;
     }
 
-#ifdef DEPRECATED_VOLUME
-    u->default_volume = DEFAULT_MIXER_DB_VALUE_ON_FIRST_BOOT;
-    pa_modargs_get_value_s32(ma, "default_volume", &u->default_volume);
-#endif
-
     if ((err = snd_mixer_open(&u->mixer_handle, 0)) < 0) {
         pa_log_error("Error opening mixer: %s", snd_strerror(err));
         goto fail;
@@ -1583,10 +1326,6 @@ int pa__init(pa_module*m) {
             u->sw_vol_compensation = FALSE;
     }
 
-#ifdef DEPRECATED_VOLUME
-    init_volume_cache(u);
-#endif
-
     /* hook in case the sink is unloaded */
     u->sink_unlink_slot = pa_hook_connect(&m->core->hooks[PA_CORE_HOOK_SINK_UNLINK],
                                           PA_HOOK_LATE,
@@ -1596,15 +1335,6 @@ int pa__init(pa_module*m) {
     u->sink_proplist_changed_slot = pa_hook_connect(&m->core->hooks[PA_CORE_HOOK_SINK_PROPLIST_CHANGED],
                                                     PA_HOOK_LATE,
                                                     (pa_hook_cb_t)sink_proplist_changed_hook_callback, u);
-#if 0
-//#if !defined(DEPRECATED_VOLUME)
-    /* Everything should be in order, write new volume callbacks */
-    u->sink->flags = u->original_flags | PA_SINK_HW_VOLUME_CTRL | PA_SINK_DECIBEL_VOLUME;
-    u->sink->get_volume = sink_get_volume_cb;
-    u->sink->set_volume = sink_set_volume_cb;
-    log_spam("%s setting new volume callbacks", u->device_name);
-#endif
-
     /* Try to load the initial mixer settings. */
     (void)sink_proplist_changed_hook_callback(u->core, u->sink, u);
 
@@ -1647,19 +1377,9 @@ void pa__done(pa_module*m) {
     if (u->sink_unlink_slot)
         pa_hook_slot_free(u->sink_unlink_slot);
 
-#ifdef DEPRECATED_VOLUME
-    if (u->cache_volumes)
-        store_active_mixer_volume(u);
-#endif
-
     if (u->mixer_list)
         free_mixer_elements(u);
 
-#ifdef DEPRECATED_VOLUME
-    if (u->gdbm_file)
-        gdbm_close(u->gdbm_file);
-#endif
-
     if (u->audio_mode)
         pa_xfree(u->audio_mode);
 
-- 
1.6.3.1

