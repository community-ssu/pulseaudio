From 9521d1b50491d8003ff0a025f1ec59f53ef1324c Mon Sep 17 00:00:00 2001
From: Juho Hamalainen <ext-juho.hamalainen@nokia.com>
Date: Tue, 3 Mar 2009 10:25:51 +0200
Subject: [PATCH 05/49] alsa-sink-old: restructure mixer value loading and setting in init

---
 src/modules/alsa/module-alsa-sink-old.c |   63 +++++++++++++++++-------------
 1 files changed, 36 insertions(+), 27 deletions(-)

diff --git a/src/modules/alsa/module-alsa-sink-old.c b/src/modules/alsa/module-alsa-sink-old.c
index deb1ecc..452b2d9 100644
--- a/src/modules/alsa/module-alsa-sink-old.c
+++ b/src/modules/alsa/module-alsa-sink-old.c
@@ -1028,7 +1028,7 @@ static void thread_func(void *userdata) {
     pa_log_debug("Thread shutting down");
 }
 
-static void mute_all_mixers(struct userdata *u, struct mixer_control_t *active_mixer) {
+static void mute_all_mixers(struct userdata *u) {
     struct mixer_control_t *m = NULL;
     pa_assert(u);
     pa_assert(u->mixer_off_volume.channels > 0);
@@ -1535,15 +1535,17 @@ static int store_mixer_volume(struct userdata *u, struct mixer_control_t *m) {
     return 0;
 }
 
-static void load_mixer_volumes(struct userdata *u) {
+/** Load mixer values either from gdbm or current hw mixer levels.
+ *
+ * Might leave active_mixer in different state than before calling,
+ * so make sure to set correct mixer after calling this.
+ */
+static int load_mixer_volumes(struct userdata *u) {
     struct mixer_control_t *m = NULL;
-    struct mixer_control_t *active_mixer = NULL;
     struct entry *entry = NULL;
     int values_read = 0;
     pa_assert(u);
 
-    active_mixer = u->active_mixer;
-
     for (m = u->mixer_list; m; m = m->next) {
 
         if (u->cache_volumes)
@@ -1568,25 +1570,23 @@ static void load_mixer_volumes(struct userdata *u) {
             pa_xfree(entry);
     }
 
-    /* if there were no stored values, set all mixers to default level */
-    if (u->cache_volumes && values_read == 0) {
-        int ii;
-        pa_log_info("%s: set hw_volume_max to all mixers", u->device_name);
-        for (m = u->mixer_list; m; m = m->next) {
-            m->cache_volume.channels = u->sink->channel_map.channels;
-            for (ii = 0; ii < m->cache_volume.channels; ii++)
-                m->cache_volume.values[ii] = from_alsa_volume(u, m->hw_volume_max*0.95);
-            m->cache_muted = FALSE;
-        }
-    }
+    return values_read;
+}
 
-    if (active_mixer && active_mixer != u->active_mixer)
-        set_mixer_elem_by_name(u, active_mixer->name);
+/** Load default volume to all mixers (0.95*hw_volume_max).
+ */
+static void load_default_mixer_volumes(struct userdata *u) {
+    struct mixer_control_t *m;
+    int ii;
+    pa_assert(u->cache_volumes);
 
-    if (u->active_mixer) {
-        pa_log_debug("%s: update active mixer volume", u->device_name);
-        pa_sink_set_volume(u->sink, &u->active_mixer->cache_volume, TRUE, TRUE);
-        pa_sink_set_mute(u->sink, u->active_mixer->cache_muted);
+    /* set all mixers to default level */
+    pa_log_info("%s: set hw_volume_max to all mixers", u->device_name);
+    for (m = u->mixer_list; m; m = m->next) {
+        m->cache_volume.channels = u->sink->channel_map.channels;
+        for (ii = 0; ii < m->cache_volume.channels; ii++)
+            m->cache_volume.values[ii] = from_alsa_volume(u, m->hw_volume_max*0.95);
+        m->cache_muted = FALSE;
     }
 }
 
@@ -1915,8 +1915,6 @@ int pa__init(pa_module*m) {
 
     init_volume_cache(u);
 
-    set_mixer_elem_by_name(u, alsa_mixer);
-
     pa_proplist_sets(u->sink->proplist, PA_ALSA_SINK_PROP_BUFFERS, PA_ALSA_SINK_PROP_BUFFERS_PRIMARY);
     pa_proplist_sets(u->sink->proplist, PA_ALSA_SINK_PROP_MIXER, "(none)");
 
@@ -1937,11 +1935,22 @@ int pa__init(pa_module*m) {
         u->sink->set_mute(u->sink);
 #endif
 
+    if (mixer_count > 0) {
+        if (load_mixer_volumes(u) == 0)
+            load_default_mixer_volumes(u);
+    }
+
     if (mixer_count > 0 && u->mixer_off_volume.channels > 0)
-        mute_all_mixers(u, u->active_mixer);
+        mute_all_mixers(u);
+
+    set_mixer_elem_by_name(u, alsa_mixer);
 
-    if (mixer_count > 0)
-        load_mixer_volumes(u);
+    if (u->active_mixer) {
+        pa_proplist_sets(u->sink->proplist, PA_ALSA_SINK_PROP_MIXER, u->active_mixer->name);
+        pa_log_debug("%s: update active mixer volume", u->device_name);
+        pa_sink_set_volume(u->sink, &u->active_mixer->cache_volume, TRUE, TRUE);
+        pa_sink_set_mute(u->sink, u->active_mixer->cache_muted);
+    }
 
     if (alsa_mixer)
         pa_xfree(alsa_mixer);
-- 
1.6.2.rc1.13.gfd76c.dirty

