From f78e7cce5de520ab74d1010a15f93882397e0c33 Mon Sep 17 00:00:00 2001
From: Juho Hamalainen <ext-juho.hamalainen@nokia.com>
Date: Thu, 5 Mar 2009 16:30:57 +0200
Subject: [PATCH 15/49] alsa-sink-volume: strip most unneeded code

---
 src/modules/alsa/module-alsa-sink-volume.c |  416 +---------------------------
 1 files changed, 4 insertions(+), 412 deletions(-)

diff --git a/src/modules/alsa/module-alsa-sink-volume.c b/src/modules/alsa/module-alsa-sink-volume.c
index 63e6ffe..f10bf98 100644
--- a/src/modules/alsa/module-alsa-sink-volume.c
+++ b/src/modules/alsa/module-alsa-sink-volume.c
@@ -121,11 +121,6 @@ struct userdata {
     pa_sink *sink;
     pa_sink_flags_t default_flags;
 
-    pa_thread *thread;
-    pa_thread_mq thread_mq;
-    pa_rtpoll *rtpoll;
-
-    snd_pcm_t *pcm_handle;
     snd_mixer_t *mixer_handle;
 
     /* store for all loaded mixers */
@@ -137,7 +132,6 @@ struct userdata {
 
     char *device_name;
 
-    pa_bool_t first;
     pa_bool_t ignore_dB;
 
     /* store mixer volumes */
@@ -173,72 +167,6 @@ static void replace_chars(char *str, const char c, const char new_c) {
     }
 }
 
-
-static int sink_process_msg(pa_msgobject *o, int code, void *data, int64_t offset, pa_memchunk *chunk) {
-//    struct userdata *u = PA_SINK(o)->userdata;
-
-    struct userdata *u = global_userdata;
-
-    switch (code) {
-
-        case PA_SINK_MESSAGE_GET_LATENCY: {
-            pa_usec_t r = 0;
-
-            *((pa_usec_t*) data) = r;
-
-            return 0;
-        }
-
-        case PA_SINK_MESSAGE_SET_STATE:
-
-            switch ((pa_sink_state_t) PA_PTR_TO_UINT(data)) {
-
-                case PA_SINK_SUSPENDED:
-//                    pa_assert(PA_SINK_IS_OPENED(u->sink->thread_info.state));
-
-//                    if (suspend(u) < 0)
-//                        return -1;
-
-                    break;
-
-                case PA_SINK_IDLE:
-                case PA_SINK_RUNNING:
-
-#if 0
-                    if (u->sink->thread_info.state == PA_SINK_INIT) {
-                        if (build_pollfd(u) < 0)
-                            return -1;
-                    }
-
-                    if (u->sink->thread_info.state == PA_SINK_SUSPENDED) {
-                        if (unsuspend(u) < 0)
-                            return -1;
-                    }
-#endif
-                    break;
-
-                case PA_SINK_UNLINKED:
-                case PA_SINK_INIT:
-                    break;
-                case PA_SINK_INVALID_STATE:
-                    pa_log_error("invalid state");
-                    break;
-            }
-
-            break;
-
-        case PA_SINK_MESSAGE_ADD_INPUT:
-            break;
-        case PA_SINK_MESSAGE_REMOVE_INPUT:
-            break;
-
-        default:
-            break;
-    }
-
-    return pa_sink_process_msg(o, code, data, offset, chunk);
-}
-
 static int mixer_callback(snd_mixer_elem_t *elem, unsigned int mask) {
     struct userdata *u = snd_mixer_elem_get_callback_private(elem);
 
@@ -583,118 +511,6 @@ static void sink_set_mute_cb(pa_sink *s) {
         return;
     }
 }
-#if 0
-static void thread_func(void *userdata) {
-    struct userdata *u = userdata;
-
-    pa_assert(u);
-
-    pa_log_debug("Thread starting up");
-
-    if (u->core->realtime_scheduling)
-        pa_make_realtime(u->core->realtime_priority);
-
-    pa_thread_mq_install(&u->thread_mq);
-    pa_rtpoll_install(u->rtpoll);
-
-    for (;;) {
-        int ret;
-
-        /* Render some data and write it to the dsp */
-        if (PA_SINK_IS_OPENED(u->sink->thread_info.state)) {
-            int work_done = 0;
-
-            if (u->sink->thread_info.rewind_requested)
-                pa_sink_process_rewind(u->sink, 0);
-
-            if (u->use_mmap) {
-                if ((work_done = mmap_write(u)) < 0)
-                    goto fail;
-            } else {
-                if ((work_done = unix_write(u)) < 0)
-                    goto fail;
-            }
-
-            if (work_done && u->first) {
-                pa_log_info("Starting playback.");
-                snd_pcm_start(u->pcm_handle);
-                u->first = FALSE;
-                continue;
-            }
-        }
-
-        /* Hmm, nothing to do. Let's sleep */
-        if ((ret = pa_rtpoll_run(u->rtpoll, 1)) < 0)
-            goto fail;
-
-        if (ret == 0)
-            goto finish;
-
-        /* Tell ALSA about this and process its response */
-        if (PA_SINK_IS_OPENED(u->sink->thread_info.state)) {
-            struct pollfd *pollfd;
-            unsigned short revents = 0;
-            int err;
-            unsigned n;
-
-            pollfd = pa_rtpoll_item_get_pollfd(u->alsa_rtpoll_item, &n);
-
-            if ((err = snd_pcm_poll_descriptors_revents(u->pcm_handle, pollfd, n, &revents)) < 0) {
-                pa_log("snd_pcm_poll_descriptors_revents() failed: %s", snd_strerror(err));
-                goto fail;
-            }
-
-            if (revents & (POLLERR|POLLNVAL|POLLHUP)) {
-
-                if (revents & POLLERR)
-                    pa_log_warn("Got POLLERR from ALSA");
-                if (revents & POLLNVAL)
-                    pa_log_warn("Got POLLNVAL from ALSA");
-                if (revents & POLLHUP)
-                    pa_log_warn("Got POLLHUP from ALSA");
-
-                /* Try to recover from this error */
-
-                switch (snd_pcm_state(u->pcm_handle)) {
-
-                    case SND_PCM_STATE_XRUN:
-                        if ((err = snd_pcm_recover(u->pcm_handle, -EPIPE, 1)) != 0) {
-                            pa_log_warn("Could not recover from POLLERR|POLLNVAL|POLLHUP and XRUN: %s", snd_strerror(err));
-                            goto fail;
-                        }
-                        break;
-
-                    case SND_PCM_STATE_SUSPENDED:
-                        if ((err = snd_pcm_recover(u->pcm_handle, -ESTRPIPE, 1)) != 0) {
-                            pa_log_warn("Could not recover from POLLERR|POLLNVAL|POLLHUP and SUSPENDED: %s", snd_strerror(err));
-                            goto fail;
-                        }
-                        break;
-
-                    default:
-
-                        snd_pcm_drop(u->pcm_handle);
-
-                        if ((err = snd_pcm_prepare(u->pcm_handle)) < 0) {
-                            pa_log_warn("Could not recover from POLLERR|POLLNVAL|POLLHUP with snd_pcm_prepare(): %s", snd_strerror(err));
-                            goto fail;
-                        }
-                        break;
-                }
-            }
-        }
-    }
-
- fail:
-    /* If this was no regular exit from the loop we have to continue
-     * processing messages until we received PA_MESSAGE_SHUTDOWN */
-    pa_asyncmsgq_post(u->thread_mq.outq, PA_MSGOBJECT(u->core), PA_CORE_MESSAGE_UNLOAD_MODULE, u->module, 0, NULL, NULL);
-    pa_asyncmsgq_wait_for(u->thread_mq.inq, PA_MESSAGE_SHUTDOWN);
-
- finish:
-    pa_log_debug("Thread shutting down");
-}
-#endif
 
 static struct mixer_control_t* get_mixer_elem_by_name(struct userdata *u, const char *mixer) {
     struct mixer_control_t *m = NULL;
@@ -1438,31 +1254,13 @@ int pa__init(pa_module*m) {
     pa_sink *hw_sink = NULL;
     pa_modargs *ma = NULL;
     struct userdata *u = NULL;
-    const char *dev_id;
-    pa_sample_spec ss;
-    pa_channel_map map;
     char *alsa_mixer = NULL;
     char *mixer_load = NULL;
-    uint32_t nfrags, frag_size;
-    uint32_t alt_nfrags, alt_frag_size;
-    snd_pcm_uframes_t period_size;
-    snd_pcm_uframes_t alt_period_size;
-    size_t frame_size;
-    size_t alt_frame_size;
-    snd_pcm_info_t *pcm_info = NULL;
     int err;
-    char *t;
     const char *sink_name;
-    char *name_buf = NULL;
-    int namereg_fail;
-    pa_bool_t use_mmap = TRUE, b, d;
-    pa_sink_new_data data;
-    const pa_alsa_profile_info *profile;
     pa_bool_t ignore_dB = FALSE;
     int mixer_count = 0;
 
-    snd_pcm_info_alloca(&pcm_info);
-
     pa_assert(m);
 
     if (!(ma = pa_modargs_new(m->argument, valid_modargs))) {
@@ -1470,13 +1268,6 @@ int pa__init(pa_module*m) {
         goto fail;
     }
 
-#if 0
-    ss = m->core->default_sample_spec;
-    if (pa_modargs_get_sample_spec_and_channel_map(ma, &ss, &map, PA_CHANNEL_MAP_ALSA) < 0) {
-        pa_log("Failed to parse sample specification and channel map");
-        goto fail;
-    }
-#endif
     if (pa_modargs_get_value_boolean(ma, "ignore_dB", &ignore_dB) < 0) {
         pa_log("Failed to parse ignore_dB argument.");
         goto fail;
@@ -1493,42 +1284,9 @@ int pa__init(pa_module*m) {
         /* Default to loading alsa_mixer, if mixer_load is not defined. */
         mixer_load = pa_xstrdup(alsa_mixer);
     }
-#if 0
-    frame_size = pa_frame_size(&ss);
-
-    nfrags = m->core->default_n_fragments;
-    frag_size = pa_usec_to_bytes(m->core->default_fragment_size_msec*1000, &ss);
-    if (frag_size <= 0)
-        frag_size = frame_size;
-
-    if (pa_modargs_get_value_u32(ma, "fragments", &nfrags) < 0 || pa_modargs_get_value_u32(ma, "fragment_size", &frag_size) < 0) {
-        pa_log("Failed to parse buffer metrics");
-        goto fail;
-    }
-    period_size = frag_size/frame_size;
-
-    alt_frame_size = pa_frame_size(&ss);
-
-    /* 0 is default value from pa_modargs_get */
-    alt_period_size = 0;
-    alt_nfrags = 0;
-    alt_frag_size = alt_frame_size;
-
-    if (pa_modargs_get_value_u32(ma, "alt_fragments", &alt_nfrags) < 0 || pa_modargs_get_value_u32(ma, "alt_fragment_size", &alt_frag_size) < 0) {
-        pa_log("Failed to parse alt buffer metrics");
-        goto fail;
-    }
 
-    if (alt_nfrags != 0) {
-        alt_period_size = alt_frag_size/alt_frame_size;
-    }
-
-    if (pa_modargs_get_value_boolean(ma, "mmap", &use_mmap) < 0) {
-        pa_log("Failed to parse mmap argument.");
-        goto fail;
-    }
-#endif
     sink_name = pa_modargs_get_value(ma, "sink_name", NULL);
+    pa_log("sink_name %s", sink_name);
     hw_sink = pa_namereg_get(m->core, sink_name, PA_NAMEREG_SINK);
 
 
@@ -1542,71 +1300,15 @@ int pa__init(pa_module*m) {
 
     u->sink = hw_sink;
     u->channel_map = u->sink->channel_map;
-#if 0
-    u->rtpoll = pa_rtpoll_new();
-    pa_thread_mq_init(&u->thread_mq, m->core->mainloop, u->rtpoll);
-    u->alsa_rtpoll_item = NULL;
-
-    snd_config_update_free_global();
-
-    b = use_mmap;
-    d = FALSE; /* use_tsched */
-    profile = NULL; /* no profile specified */
-
-    if ((dev_id = pa_modargs_get_value(ma, "device_id", NULL))) {
-
-        if (!(u->pcm_handle = pa_alsa_open_by_device_id_auto(
-                      dev_id,
-                      &u->device_name,
-                      &ss, &map,
-                      SND_PCM_STREAM_PLAYBACK,
-                      &nfrags, &period_size, period_size * nfrags,
-                      &b, &d, &profile)))
-
-            goto fail;
-
-    } else {
-
-        if (!(u->pcm_handle = pa_alsa_open_by_device_string(
-                      pa_modargs_get_value(ma, "device", DEFAULT_DEVICE),
-                      &u->device_name,
-                      &ss, &map,
-                      SND_PCM_STREAM_PLAYBACK,
-                      &nfrags, &period_size, period_size * nfrags,
-                      &b, &d, FALSE)))
-            goto fail;
 
+    pa_log("get device_name from sink");
+    if (pa_proplist_gets(u->sink->proplist, PA_PROP_DEVICE_STRING)) {
+        u->device_name = pa_xstrdup(pa_proplist_gets(u->sink->proplist, PA_PROP_DEVICE_STRING));
     }
-#endif
-    u->device_name = pa_sprintf_malloc("hw:0");
 
     pa_assert(u->device_name);
     pa_log_info("Successfully opened device %s.", u->device_name);
 
-#if 0
-    if (use_mmap && !b) {
-        pa_log_info("Device doesn't support mmap(), falling back to UNIX read/write mode.");
-        u->use_mmap = use_mmap = b;
-    }
-
-    if (u->use_mmap)
-        pa_log_info("Successfully enabled mmap() mode.");
-
-    if ((err = snd_pcm_info(u->pcm_handle, pcm_info)) < 0) {
-        pa_log("Error fetching PCM info: %s", snd_strerror(err));
-        goto fail;
-    }
-
-    if ((err = pa_alsa_set_sw_params(u->pcm_handle, period_size)) < 0) {
-        pa_log("Failed to set software parameters: %s", snd_strerror(err));
-        goto fail;
-    }
-
-    /* ALSA might tweak the sample spec, so recalculate the frame size */
-    frame_size = pa_frame_size(&ss);
-    alt_frame_size = pa_frame_size(&ss);
-#endif
-
     if ((err = snd_mixer_open(&u->mixer_handle, 0)) < 0) {
         pa_log("Error opening mixer: %s", snd_strerror(err));
     } else {
@@ -1644,91 +1346,11 @@ int pa__init(pa_module*m) {
         }
     }
 
-#if 0
-    if ((name = pa_modargs_get_value(ma, "sink_name", NULL)))
-        namereg_fail = 1;
-    else {
-        name = name_buf = pa_sprintf_malloc("alsa_output.%s", u->device_name);
-        namereg_fail = 0;
-    }
-
-    pa_sink_new_data_init(&data);
-    data.driver = __FILE__;
-    data.module = m;
-    pa_sink_new_data_set_name(&data, name);
-    data.namereg_fail = namereg_fail;
-    pa_sink_new_data_set_sample_spec(&data, &ss);
-    pa_sink_new_data_set_channel_map(&data, &map);
-
-    pa_alsa_init_proplist_pcm(m->core, data.proplist, u->pcm_handle);
-    pa_proplist_sets(data.proplist, PA_PROP_DEVICE_STRING, u->device_name);
-    pa_proplist_setf(data.proplist, PA_PROP_DEVICE_BUFFERING_BUFFER_SIZE, "%lu", (unsigned long) (period_size * frame_size * nfrags));
-    pa_proplist_setf(data.proplist, PA_PROP_DEVICE_BUFFERING_FRAGMENT_SIZE, "%lu", (unsigned long) (period_size * frame_size));
-    pa_proplist_sets(data.proplist, PA_PROP_DEVICE_ACCESS_MODE, (u->use_mmap ? "mmap" : "serial"));
-
-    u->sink = pa_sink_new(m->core, &data, PA_SINK_HARDWARE|PA_SINK_LATENCY);
-    pa_sink_new_data_done(&data);
-    pa_xfree(name_buf);
-
-    if (!u->sink) {
-        pa_log("Failed to create sink object");
-        goto fail;
-    }
-
-    u->sink->parent.process_msg = sink_process_msg;
-    u->sink->update_requested_latency = NULL;
-    u->sink->userdata = u;
-
-    pa_sink_set_asyncmsgq(u->sink, u->thread_mq.inq);
-    pa_sink_set_rtpoll(u->sink, u->rtpoll);
-    pa_sink_set_description(u->sink, t = pa_sprintf_malloc(
-                                    "ALSA PCM on %s (%s)%s",
-                                    u->device_name,
-                                    snd_pcm_info_get_name(pcm_info),
-                                    use_mmap ? " via DMA" : ""));
-    pa_xfree(t);
-
-    u->frame_size = frame_size;
-    u->fragment_size = frag_size = period_size * frame_size;
-    u->nfragments = nfrags;
-    u->hwbuf_size = u->fragment_size * nfrags;
-    u->period_size = period_size;
-
-    if (u->switching_enabled) {
-        u->pri_frame_size = frame_size;
-        u->pri_fragment_size = frag_size = period_size * frame_size;
-        u->pri_nfragments = nfrags;
-        u->pri_hwbuf_size = u->fragment_size * nfrags;
-        u->pri_period_size = period_size;
-
-        u->alt_frame_size = alt_frame_size;
-        u->alt_fragment_size = alt_frag_size = alt_period_size * alt_frame_size;
-        u->alt_nfragments = alt_nfrags;
-        u->alt_hwbuf_size = u->alt_fragment_size * alt_nfrags;
-        u->alt_period_size = alt_period_size;
-    }
-
-
-    pa_log_info("PRI: Using %u fragments of size %lu bytes.", nfrags, (long unsigned) u->fragment_size);
-    if (u->switching_enabled)
-        pa_log_info("ALT: Using %u fragments of size %lu bytes.", alt_nfrags, (long unsigned) u->alt_fragment_size);
-
-    pa_memchunk_reset(&u->memchunk);
-
-    u->channel_map = map;
-    if (!(u->thread = pa_thread_new(thread_func, u))) {
-        pa_log("Failed to create thread.");
-        goto fail;
-    }
-#endif
-
     if (mixer_load)
         mixer_count = get_mixer_elements(u, mixer_load);
-    pa_log("we are here 0");
 
     init_volume_cache(u);
 
-///    pa_proplist_sets(u->sink->proplist, PA_ALSA_SINK_PROP_BUFFERS, PA_ALSA_SINK_PROP_BUFFERS_PRIMARY);
     pa_proplist_sets(u->sink->proplist, PA_ALSA_SINK_PROP_MIXER, "(none)");
 
     /* hook for buffer & mixer switching, only if either buffer switching or
@@ -1738,7 +1360,6 @@ int pa__init(pa_module*m) {
                                                         PA_HOOK_LATE,
                                                         (pa_hook_cb_t)sink_proplist_changed_hook_callback, u);
 
-///    pa_sink_put(u->sink);
 
     /* pa_sink_put modifies sink flags */
     u->default_flags = u->sink->flags; 
@@ -1755,10 +1376,8 @@ int pa__init(pa_module*m) {
         if (load_mixer_volumes(u) == 0 && u->cache_volumes)
             load_default_mixer_volumes(u);
     }
-    pa_log("we are here 1");
 
     set_mixer_elem_by_name(u, alsa_mixer);
-    pa_log("we are here 2");
 
     if (u->active_mixer) {
         char *tmp = pa_sprintf_malloc("%s:%s", u->active_mixer->name, PA_ALSA_SINK_PROP_MIXER_CONTROL);
@@ -1815,36 +1434,9 @@ void pa__done(pa_module*m) {
     if (u->gdbm_file)
         gdbm_close(u->gdbm_file);
 
-//    if (u->sink)
-//        pa_sink_unlink(u->sink);
-
-//    if (u->thread) {
-//        pa_asyncmsgq_send(u->thread_mq.inq, NULL, PA_MESSAGE_SHUTDOWN, NULL, 0, NULL);
-//        pa_thread_free(u->thread);
-//    }
-
-//    pa_thread_mq_done(&u->thread_mq);
-
-//    if (u->sink)
-//        pa_sink_unref(u->sink);
-
-//    if (u->memchunk.memblock)
-//        pa_memblock_unref(u->memchunk.memblock);
-
-//    if (u->alsa_rtpoll_item)
-//        pa_rtpoll_item_free(u->alsa_rtpoll_item);
-
-//    if (u->rtpoll)
-//        pa_rtpoll_free(u->rtpoll);
-
     if (u->mixer_handle)
         snd_mixer_close(u->mixer_handle);
 
-//    if (u->pcm_handle) {
-//        snd_pcm_drop(u->pcm_handle);
-//        snd_pcm_close(u->pcm_handle);
-//    }
-
     global_userdata = NULL;
 
     pa_xfree(u->device_name);
-- 
1.6.2.rc1.13.gfd76c.dirty

