From 32a16b9d14ae85e4c1dfb242b32f2e2abe64c85b Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Marc-Andr=C3=A9=20Lureau?= <marc-andre.lureau@nokia.com>
Date: Tue, 10 Mar 2009 17:07:35 +0200
Subject: [PATCH] pulsecore: add flat_volume_sink and forward set_volume to it

---
 src/pulsecore/sink.c |   47 ++++++++++++++++++++++++++++++++---------------
 src/pulsecore/sink.h |    2 ++
 2 files changed, 34 insertions(+), 15 deletions(-)

diff --git a/src/pulsecore/sink.c b/src/pulsecore/sink.c
index a537670..95978c9 100644
--- a/src/pulsecore/sink.c
+++ b/src/pulsecore/sink.c
@@ -1,7 +1,7 @@
 /***
   This file is part of PulseAudio.
 
-  Copyright 2004-2006 Lennart Poettering
+  Copyright 2004-2006, 2009 Lennart Poettering
   Copyright 2006 Pierre Ossman <ossman@cendio.se> for Cendio AB
 
   PulseAudio is free software; you can redistribute it and/or modify
@@ -194,6 +194,7 @@ pa_sink* pa_sink_new(
     s->driver = pa_xstrdup(pa_path_get_filename(data->driver));
     s->module = data->module;
     s->card = data->card;
+    s->flat_volume_sink = data->flat_volume_sink;
 
     s->sample_spec = data->sample_spec;
     s->channel_map = data->channel_map;
@@ -1077,26 +1078,42 @@ void pa_sink_set_volume(pa_sink *s, const pa_cvolume *volume, pa_bool_t propagat
     pa_assert(pa_cvolume_compatible(volume, &s->sample_spec));
 
     old_virtual_volume = s->virtual_volume;
+
+    if (s->flat_volume_sink) {
+        pa_cvolume remapped;
+
+        remapped = *volume;
+        /* maybe we can pass original channel map, to not loose information? */
+        pa_cvolume_remap(&remapped, &s->channel_map, &s->flat_volume_sink->channel_map);
+        pa_sink_set_volume(s->flat_volume_sink, &remapped, propagate, sendmsg);
+    }
+
     s->virtual_volume = *volume;
     virtual_volume_changed = !pa_cvolume_equal(&old_virtual_volume, &s->virtual_volume);
 
-    /* Propagate this volume change back to the inputs */
-    if (virtual_volume_changed)
-        if (propagate && (s->flags & PA_SINK_FLAT_VOLUME))
-            pa_sink_propagate_flat_volume(s, &old_virtual_volume);
+    if (!s->flat_volume_sink) {
+        /* Propagate this volume change back to the inputs */
+        if (virtual_volume_changed)
+            if (propagate && (s->flags & PA_SINK_FLAT_VOLUME))
+                pa_sink_propagate_flat_volume(s, &old_virtual_volume);
 
-    if (s->set_volume) {
-        /* If we have a function set_volume(), then we do not apply a
-         * soft volume by default. However, set_volume() is apply one
-         * to s->soft_volume */
+        if (s->set_volume) {
+            /* If we have a function set_volume(), then we do not apply a
+             * soft volume by default. However, set_volume() is apply one
+             * to s->soft_volume */
 
-        pa_cvolume_reset(&s->soft_volume, s->sample_spec.channels);
-        s->set_volume(s);
+            pa_cvolume_reset(&s->soft_volume, s->sample_spec.channels);
+            s->set_volume(s);
 
-    } else
-        /* If we have no function set_volume(), then the soft volume
-         * becomes the virtual volume */
-        s->soft_volume = s->virtual_volume;
+        } else
+            /* If we have no function set_volume(), then the soft volume
+             * becomes the virtual volume */
+            s->soft_volume = s->virtual_volume;
+    } else {
+        /* flatten sink have same virtual volume as their master sink
+         * but no soft volume */
+        pa_cvolume_reset(&s->soft_volume, s->sample_spec.channels);
+    }
 
     /* This tells the sink that soft and/or virtual volume changed */
     if (sendmsg)
diff --git a/src/pulsecore/sink.h b/src/pulsecore/sink.h
index bafa24c..3a332f1 100644
--- a/src/pulsecore/sink.h
+++ b/src/pulsecore/sink.h
@@ -75,6 +75,7 @@ struct pa_sink {
     pa_volume_t base_volume; /* shall be constant */
     unsigned n_volume_steps; /* shall be constant */
 
+    pa_sink *flat_volume_sink; /* may be NULL (we could have more than 1?) */
     pa_cvolume virtual_volume, soft_volume;
     pa_bool_t muted:1;
 
@@ -186,6 +187,7 @@ typedef struct pa_sink_new_data {
     pa_module *module;
     pa_card *card;
 
+    pa_sink *flat_volume_sink;
     pa_sample_spec sample_spec;
     pa_channel_map channel_map;
     pa_cvolume volume;
-- 
1.5.6.3

