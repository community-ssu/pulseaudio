From ca5f8e55b7ea3a2396df8cd2f56ee26990675cab Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Juho=20H=C3=A4m=C3=A4l=C3=A4inen?= <ext-juho.hamalainen@nokia.com>
Date: Tue, 8 Dec 2009 14:18:26 +0200
Subject: [PATCH] bluetooth-device: implement silent volume using soft volume

---
 src/modules/bluetooth/module-bluetooth-device.c |  111 ++++++++++++++---------
 1 files changed, 69 insertions(+), 42 deletions(-)

diff --git a/src/modules/bluetooth/module-bluetooth-device.c b/src/modules/bluetooth/module-bluetooth-device.c
index 8a45a5a..300c214 100644
--- a/src/modules/bluetooth/module-bluetooth-device.c
+++ b/src/modules/bluetooth/module-bluetooth-device.c
@@ -1429,6 +1429,7 @@ finish:
     pa_log_debug("IO thread shutting down");
 }
 
+#define BT_MAX_GAIN (16)
 #define HSP_MAX_GAIN (15)
 
 /* Run from main thread */
@@ -1453,34 +1454,50 @@ static DBusHandlerResult filter_cb(DBusConnection *bus, DBusMessage *m, void *us
     if (dbus_message_is_signal(m, "org.bluez.Headset", "SpeakerGainChanged") ||
         dbus_message_is_signal(m, "org.bluez.Headset", "MicrophoneGainChanged")) {
 
-        dbus_uint16_t gain;
+        dbus_uint16_t bt_gain;
         pa_cvolume v;
+        int gain;
+        int current_gain;
 
-        if (!dbus_message_get_args(m, &err, DBUS_TYPE_UINT16, &gain, DBUS_TYPE_INVALID) || gain > HSP_MAX_GAIN) {
+        if (!dbus_message_get_args(m, &err, DBUS_TYPE_UINT16, &bt_gain, DBUS_TYPE_INVALID) || bt_gain > HSP_MAX_GAIN) {
             pa_log("Failed to parse org.bluez.Headset.{Speaker|Microphone}GainChanged: %s", err.message);
             goto fail;
         }
 
         if (u->profile == PROFILE_HSP) {
             if (u->sink && dbus_message_is_signal(m, "org.bluez.Headset", "SpeakerGainChanged")) {
-                pa_volume_t volume = (pa_volume_t) (gain * PA_VOLUME_NORM / HSP_MAX_GAIN);
 
-                /* increment volume by one to correct rounding errors */
-                if (volume < PA_VOLUME_NORM)
-                    volume ++;
+                gain = bt_gain + 1;
 
-                pa_cvolume_set(&v, u->sample_spec.channels, volume);
-                pa_sink_volume_changed(u->sink, &v);
+                if (bt_gain > 0 && pa_cvolume_max(&u->sink->virtual_volume) < PA_VOLUME_NORM/BT_MAX_GAIN) {
+                    pa_cvolume_set(&v, u->sink->soft_volume.channels, (pa_volume_t)PA_VOLUME_NORM);
+                    pa_sink_set_soft_volume(u->sink, &v);
+                } else if (bt_gain == 0 && pa_cvolume_max(&u->sink->virtual_volume) < PA_VOLUME_NORM/BT_MAX_GAIN) {
+                    gain = 0;
+                }
+                current_gain = (pa_cvolume_max(&u->sink->virtual_volume) * BT_MAX_GAIN) / PA_VOLUME_NORM;
+
+                if (current_gain != gain) {
+                    pa_cvolume_set(&v, u->sample_spec.channels, (pa_volume_t) (gain * PA_VOLUME_NORM / BT_MAX_GAIN));
+                    pa_sink_volume_changed(u->sink, &v);
+                }
 
             } else if (u->source && dbus_message_is_signal(m, "org.bluez.Headset", "MicrophoneGainChanged")) {
-                pa_volume_t volume = (pa_volume_t) (gain * PA_VOLUME_NORM / HSP_MAX_GAIN);
 
-                /* increment volume by one to correct rounding errors */
-                if (volume < PA_VOLUME_NORM)
-                    volume ++;
+                gain = bt_gain + 1;
 
-                pa_cvolume_set(&v, u->sample_spec.channels, volume);
-                pa_source_volume_changed(u->source, &v);
+                if (bt_gain > 0 && pa_cvolume_max(&u->source->virtual_volume) < PA_VOLUME_NORM/BT_MAX_GAIN) {
+                    pa_cvolume_set(&v, u->source->soft_volume.channels, (pa_volume_t)PA_VOLUME_NORM);
+                    pa_source_set_soft_volume(u->source, &v);
+                } else if (bt_gain == 0 && pa_cvolume_max(&u->source->virtual_volume) < PA_VOLUME_NORM/BT_MAX_GAIN) {
+                    gain = 0;
+                }
+                current_gain = (pa_cvolume_max(&u->source->virtual_volume) * BT_MAX_GAIN) / PA_VOLUME_NORM;
+
+                if (current_gain != gain) {
+                    pa_cvolume_set(&v, u->sample_spec.channels, (pa_volume_t) (gain * PA_VOLUME_NORM / BT_MAX_GAIN));
+                    pa_source_volume_changed(u->source, &v);
+                }
             }
         }
     }
@@ -1494,8 +1511,9 @@ fail:
 /* Run from main thread */
 static void sink_set_volume_cb(pa_sink *s) {
     DBusMessage *m;
-    dbus_uint16_t gain;
-    pa_volume_t volume;
+    int gain;
+    dbus_uint16_t bt_gain;
+    pa_cvolume v;
     struct userdata *u;
     char *k;
 
@@ -1510,21 +1528,25 @@ static void sink_set_volume_cb(pa_sink *s) {
     pa_assert(u->sink == s);
     pa_assert(u->profile == PROFILE_HSP);
 
-    gain = (pa_cvolume_max(&s->virtual_volume) * HSP_MAX_GAIN) / PA_VOLUME_NORM;
-
-    if (gain > HSP_MAX_GAIN)
-        gain = HSP_MAX_GAIN;
+    gain = (pa_cvolume_max(&s->virtual_volume) * BT_MAX_GAIN) / PA_VOLUME_NORM;
 
-    volume = (pa_volume_t) (gain * PA_VOLUME_NORM / HSP_MAX_GAIN);
+    if (gain > BT_MAX_GAIN)
+        gain = BT_MAX_GAIN;
 
-    /* increment volume by one to correct rounding errors */
-    if (volume < PA_VOLUME_NORM)
-        volume ++;
-
-    pa_cvolume_set(&s->virtual_volume, u->sample_spec.channels, volume);
+    if (gain > 0) {
+        pa_cvolume_init(&v);
+        pa_cvolume_set(&v, s->soft_volume.channels, (pa_volume_t)PA_VOLUME_NORM);
+        pa_sink_set_soft_volume(s, &v);
+    } else {
+        pa_cvolume_init(&v);
+        pa_cvolume_set(&v, s->soft_volume.channels, (pa_volume_t)0);
+        pa_sink_set_soft_volume(s, &v);
+        gain = 1;
+    }
+    bt_gain = gain - 1;
 
     pa_assert_se(m = dbus_message_new_method_call("org.bluez", u->path, "org.bluez.Headset", "SetSpeakerGain"));
-    pa_assert_se(dbus_message_append_args(m, DBUS_TYPE_UINT16, &gain, DBUS_TYPE_INVALID));
+    pa_assert_se(dbus_message_append_args(m, DBUS_TYPE_UINT16, &bt_gain, DBUS_TYPE_INVALID));
     pa_assert_se(dbus_connection_send(pa_dbus_connection_get(u->connection), m, NULL));
     dbus_message_unref(m);
 }
@@ -1532,8 +1554,9 @@ static void sink_set_volume_cb(pa_sink *s) {
 /* Run from main thread */
 static void source_set_volume_cb(pa_source *s) {
     DBusMessage *m;
-    dbus_uint16_t gain;
-    pa_volume_t volume;
+    int gain;
+    dbus_uint16_t bt_gain;
+    pa_cvolume v;
     struct userdata *u;
     char *k;
 
@@ -1548,21 +1571,25 @@ static void source_set_volume_cb(pa_source *s) {
     pa_assert(u->source == s);
     pa_assert(u->profile == PROFILE_HSP);
 
-    gain = (pa_cvolume_max(&s->virtual_volume) * HSP_MAX_GAIN) / PA_VOLUME_NORM;
-
-    if (gain > HSP_MAX_GAIN)
-        gain = HSP_MAX_GAIN;
+    gain = (pa_cvolume_max(&s->virtual_volume) * BT_MAX_GAIN) / PA_VOLUME_NORM;
 
-    volume = (pa_volume_t) (gain * PA_VOLUME_NORM / HSP_MAX_GAIN);
+    if (gain > BT_MAX_GAIN)
+        gain = BT_MAX_GAIN;
 
-    /* increment volume by one to correct rounding errors */
-    if (volume < PA_VOLUME_NORM)
-        volume ++;
-
-    pa_cvolume_set(&s->virtual_volume, u->sample_spec.channels, volume);
+    if (gain > 0) {
+        pa_cvolume_init(&v);
+        pa_cvolume_set(&v, s->soft_volume.channels, (pa_volume_t)PA_VOLUME_NORM);
+        pa_source_set_soft_volume(s, &v);
+    } else {
+        pa_cvolume_init(&v);
+        pa_cvolume_set(&v, s->soft_volume.channels, (pa_volume_t)0);
+        pa_source_set_soft_volume(s, &v);
+        gain = 1;
+    }
+    bt_gain = gain - 1;
 
     pa_assert_se(m = dbus_message_new_method_call("org.bluez", u->path, "org.bluez.Headset", "SetMicrophoneGain"));
-    pa_assert_se(dbus_message_append_args(m, DBUS_TYPE_UINT16, &gain, DBUS_TYPE_INVALID));
+    pa_assert_se(dbus_message_append_args(m, DBUS_TYPE_UINT16, &bt_gain, DBUS_TYPE_INVALID));
     pa_assert_se(dbus_connection_send(pa_dbus_connection_get(u->connection), m, NULL));
     dbus_message_unref(m);
 }
@@ -1716,7 +1743,7 @@ static int add_sink(struct userdata *u) {
 
     if (u->profile == PROFILE_HSP) {
         u->sink->set_volume = sink_set_volume_cb;
-        u->sink->n_volume_steps = 16;
+        u->sink->n_volume_steps = BT_MAX_GAIN+1;
 
         k = pa_sprintf_malloc("bluetooth-device@%p", (void*) u->sink);
         pa_shared_set(u->core, k, u);
@@ -1773,7 +1800,7 @@ static int add_source(struct userdata *u) {
     if (u->profile == PROFILE_HSP) {
         pa_proplist_sets(u->source->proplist, "bluetooth.nrec", (u->hsp.pcm_capabilities.flags & BT_PCM_FLAG_NREC) ? "1" : "0");
         u->source->set_volume = source_set_volume_cb;
-        u->source->n_volume_steps = 16;
+        u->source->n_volume_steps = BT_MAX_GAIN+1;
 
         k = pa_sprintf_malloc("bluetooth-device@%p", (void*) u->source);
         pa_shared_set(u->core, k, u);
-- 
1.6.0.4

