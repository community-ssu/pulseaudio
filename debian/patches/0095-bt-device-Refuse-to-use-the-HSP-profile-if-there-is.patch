From 62a8f529147ea13a576c797b71cb6882e3b3f737 Mon Sep 17 00:00:00 2001
From: Tanu Kaskinen <tanu.kaskinen@digia.com>
Date: Thu, 22 Oct 2009 15:08:13 +0300
Subject: [PATCH] bt-device: Refuse to use the HSP profile if there is some other HSP device active.

---
 src/modules/bluetooth/module-bluetooth-device.c |  140 ++++++++++++++++------
 1 files changed, 102 insertions(+), 38 deletions(-)

diff --git a/src/modules/bluetooth/module-bluetooth-device.c b/src/modules/bluetooth/module-bluetooth-device.c
index 7721257..266ee58 100644
--- a/src/modules/bluetooth/module-bluetooth-device.c
+++ b/src/modules/bluetooth/module-bluetooth-device.c
@@ -125,7 +125,7 @@ struct hsp_info {
     pa_sink *sco_sink;
     void (*sco_sink_set_volume)(pa_sink *s);
     pa_source *sco_source;
-    void (*sco_source_set_volume)(pa_sink *s);
+    void (*sco_source_set_volume)(pa_source *s);
 #endif
     pa_hook_slot *sink_state_changed_slot;
     pa_hook_slot *source_state_changed_slot;
@@ -189,6 +189,8 @@ struct userdata {
 
 #define MAX_PLAYBACK_CATCH_UP_USEC (100*PA_USEC_PER_MSEC)
 
+#define CURRENT_HSP_DEVICE_KEY "current-hsp-device" /* Key to core->shared. */
+
 #ifdef NOKIA
 #define USE_SCO_OVER_PCM(u) (u->profile == PROFILE_HSP && (u->hsp.sco_sink && u->hsp.sco_source))
 #endif
@@ -1638,6 +1640,7 @@ static pa_hook_result_t source_state_changed_cb(pa_core *c, pa_source *s, struct
 
 /* Run from main thread */
 static int add_sink(struct userdata *u) {
+    char *k;
 
 #ifdef NOKIA
     if (USE_SCO_OVER_PCM(u)) {
@@ -1688,6 +1691,10 @@ static int add_sink(struct userdata *u) {
     if (u->profile == PROFILE_HSP) {
         u->sink->set_volume = sink_set_volume_cb;
         u->sink->n_volume_steps = 16;
+
+        k = pa_sprintf_malloc("bluetooth-device@%p", (void*) u->sink);
+        pa_shared_set(u->core, k, u);
+        pa_xfree(k);
     }
 
     return 0;
@@ -1695,6 +1702,7 @@ static int add_sink(struct userdata *u) {
 
 /* Run from main thread */
 static int add_source(struct userdata *u) {
+    char *k;
 
 #ifdef NOKIA
     if (USE_SCO_OVER_PCM(u)) {
@@ -1740,6 +1748,10 @@ static int add_source(struct userdata *u) {
         pa_proplist_sets(u->source->proplist, "bluetooth.nrec", (u->hsp.pcm_capabilities.flags & BT_PCM_FLAG_NREC) ? "1" : "0");
         u->source->set_volume = source_set_volume_cb;
         u->source->n_volume_steps = 16;
+
+        k = pa_sprintf_malloc("bluetooth-device@%p", (void*) u->source);
+        pa_shared_set(u->core, k, u);
+        pa_xfree(k);
     }
 
     return 0;
@@ -1838,6 +1850,8 @@ static int init_profile(struct userdata *u) {
 
 /* Run from main thread */
 static void stop_thread(struct userdata *u) {
+    char *k;
+
     pa_assert(u);
 
     if (u->thread) {
@@ -1862,11 +1876,23 @@ static void stop_thread(struct userdata *u) {
     }
 
     if (u->sink) {
+        if (u->profile == PROFILE_HSP) {
+            k = pa_sprintf_malloc("bluetooth-device@%p", (void*) u->sink);
+            pa_shared_remove(u->core, k);
+            pa_xfree(k);
+        }
+
         pa_sink_unref(u->sink);
         u->sink = NULL;
     }
 
     if (u->source) {
+        if (u->profile == PROFILE_HSP) {
+            k = pa_sprintf_malloc("bluetooth-device@%p", (void*) u->source);
+            pa_shared_remove(u->core, k);
+            pa_xfree(k);
+        }
+
         pa_source_unref(u->source);
         u->source = NULL;
     }
@@ -1897,8 +1923,20 @@ static int start_thread(struct userdata *u) {
 #ifdef NOKIA
     if (USE_SCO_OVER_PCM(u)) {
         if (sco_over_pcm_state_update(u) < 0) {
-            u->sink = NULL;
-            u->source = NULL;
+            char *k;
+
+            if (u->sink) {
+                k = pa_sprintf_malloc("bluetooth-device@%p", (void*) u->sink);
+                pa_shared_remove(u->core, k);
+                pa_xfree(k);
+                u->sink = NULL;
+            }
+            if (u->source) {
+                k = pa_sprintf_malloc("bluetooth-device@%p", (void*) u->source);
+                pa_shared_remove(u->core, k);
+                pa_xfree(k);
+                u->source = NULL;
+            }
             return -1;
         }
 
@@ -1936,9 +1974,27 @@ static int start_thread(struct userdata *u) {
     return 0;
 }
 
+#ifdef NOKIA
+static void save_sco_volume_callbacks(struct userdata *u) {
+    pa_assert(u);
+    pa_assert(USE_SCO_OVER_PCM(u));
+
+    u->hsp.sco_sink_set_volume = u->hsp.sco_sink->set_volume;
+    u->hsp.sco_source_set_volume = u->hsp.sco_source->set_volume;
+}
+
+static void restore_sco_volume_callbacks(struct userdata *u) {
+    pa_assert(u);
+    pa_assert(USE_SCO_OVER_PCM(u));
+
+    u->hsp.sco_sink->set_volume = u->hsp.sco_sink_set_volume;
+    u->hsp.sco_source->set_volume = u->hsp.sco_source_set_volume;
+}
+#endif
+
 /* Run from main thread */
 static int card_set_profile(pa_card *c, pa_card_profile *new_profile) {
-    struct userdata *u;
+    struct userdata *u, *other_hsp_device;
     enum profile *d;
     pa_queue *inputs = NULL, *outputs = NULL;
     const pa_bluetooth_device *device;
@@ -1954,6 +2010,9 @@ static int card_set_profile(pa_card *c, pa_card_profile *new_profile) {
         return -1;
     }
 
+    if (u->profile == PROFILE_HSP)
+        pa_shared_remove(u->core, CURRENT_HSP_DEVICE_KEY);
+
     /* The state signal is sent by bluez, so it is racy to check
        strictly for CONNECTED, we should also accept STREAMING state
        as being good enough. However, if the profile is used
@@ -1963,6 +2022,10 @@ static int card_set_profile(pa_card *c, pa_card_profile *new_profile) {
         pa_log_warn("HSP is not connected, refused to switch profile");
         return -1;
     }
+    else if (*d == PROFILE_HSP && (other_hsp_device = pa_shared_get(u->core, CURRENT_HSP_DEVICE_KEY))) {
+        pa_log_warn("Another HSP device (%s) is already active, refused to switch profile.", other_hsp_device->card->name);
+        return -1;
+    }
     else if (device->audio_sink_state < PA_BT_AUDIO_STATE_CONNECTED && *d == PROFILE_A2DP) {
         pa_log_warn("A2DP is not connected, refused to switch profile");
         return -1;
@@ -1987,9 +2050,22 @@ static int card_set_profile(pa_card *c, pa_card_profile *new_profile) {
     stop_thread(u);
     shutdown_bt(u);
 
+#ifdef NOKIA
+    if (USE_SCO_OVER_PCM(u))
+        restore_sco_volume_callbacks(u);
+#endif
+
     u->profile = *d;
     u->sample_spec = u->requested_sample_spec;
 
+#ifdef NOKIA
+    if (USE_SCO_OVER_PCM(u))
+        save_sco_volume_callbacks(u);
+#endif
+
+    if (u->profile == PROFILE_HSP)
+        pa_shared_set(u->core, CURRENT_HSP_DEVICE_KEY, u);
+
     init_bt(u);
 
     if (u->profile != PROFILE_OFF)
@@ -2023,6 +2099,7 @@ static int add_card(struct userdata *u, const char *default_profile, const pa_bl
     enum profile *d;
     const char *ff;
     char *n;
+    struct userdata *other_hsp_device = NULL;
 
     pa_card_new_data_init(&data);
     data.driver = __FILE__;
@@ -2110,11 +2187,23 @@ static int add_card(struct userdata *u, const char *default_profile, const pa_bl
         pa_log_warn("Default profile not connected, selecting off profile");
         u->card->active_profile = pa_hashmap_get(u->card->profiles, "off");
         u->card->save_profile = FALSE;
+    } else if (*d == PROFILE_HSP && (other_hsp_device = pa_shared_get(u->core, CURRENT_HSP_DEVICE_KEY))) {
+        pa_log_warn("Another HSP device (%s) is already active, selecting off profile.", other_hsp_device->card->name);
+        u->card->active_profile = pa_hashmap_get(u->card->profiles, "off");
+        u->card->save_profile = FALSE;
     }
 
     d = PA_CARD_PROFILE_DATA(u->card->active_profile);
     u->profile = *d;
 
+#ifdef NOKIA
+    if (USE_SCO_OVER_PCM(u))
+        save_sco_volume_callbacks(u);
+#endif
+
+    if (u->profile == PROFILE_HSP)
+        pa_shared_set(u->core, CURRENT_HSP_DEVICE_KEY, u);
+
     return 0;
 }
 
@@ -2178,7 +2267,7 @@ int pa__init(pa_module* m) {
     struct userdata *u;
     const char *address, *path;
     DBusError err;
-    char *mike, *speaker, *k;
+    char *mike, *speaker;
     const pa_bluetooth_device *device;
 
     pa_assert(m);
@@ -2277,22 +2366,6 @@ int pa__init(pa_module* m) {
     pa_xfree(speaker);
     pa_xfree(mike);
 
-#ifdef NOKIA
-    if (u->hsp.sco_sink) {
-        u->hsp.sco_sink_set_volume = u->hsp.sco_sink->set_volume;
-        k = pa_sprintf_malloc("bluetooth-device@%p", (void*)u->hsp.sco_sink);
-        pa_shared_set(u->core, k, u);
-        pa_xfree(k);
-    }
-
-    if (u->hsp.sco_source) {
-        u->hsp.sco_source_set_volume = u->hsp.sco_source->set_volume;
-        k = pa_sprintf_malloc("bluetooth-device@%p", (void*)u->hsp.sco_source);
-        pa_shared_set(u->core, k, u);
-        pa_xfree(k);
-    }
-#endif
-
     if (u->profile != PROFILE_OFF)
         if (init_profile(u) < 0)
             goto fail;
@@ -2325,7 +2398,6 @@ int pa__get_n_used(pa_module *m) {
 
 void pa__done(pa_module *m) {
     struct userdata *u;
-    char *k;
 
     pa_assert(m);
 
@@ -2348,6 +2420,14 @@ void pa__done(pa_module *m) {
 
     stop_thread(u);
 
+#ifdef NOKIA
+    if (USE_SCO_OVER_PCM(u))
+        restore_sco_volume_callbacks(u);
+#endif
+
+    if (u->profile == PROFILE_HSP)
+        pa_shared_remove(u->core, CURRENT_HSP_DEVICE_KEY);
+
     if (u->connection) {
 
         if (u->path) {
@@ -2376,22 +2456,6 @@ void pa__done(pa_module *m) {
 
     shutdown_bt(u);
 
-#ifdef NOKIA
-    if (u->hsp.sco_sink) {
-        u->hsp.sco_sink->set_volume = u->hsp.sco_sink_set_volume;
-        k = pa_sprintf_malloc("bluetooth-device@%p", (void*)u->hsp.sco_sink);
-        pa_shared_remove(u->core, k);
-        pa_xfree(k);
-    }
-
-    if (u->hsp.sco_source) {
-        u->hsp.sco_source->set_volume = u->hsp.sco_source_set_volume;
-        k = pa_sprintf_malloc("bluetooth-device@%p", (void*)u->hsp.sco_source);
-        pa_shared_remove(u->core, k);
-        pa_xfree(k);
-    }
-#endif
-
     if (u->a2dp.buffer)
         pa_xfree(u->a2dp.buffer);
 
-- 
1.5.6.3

