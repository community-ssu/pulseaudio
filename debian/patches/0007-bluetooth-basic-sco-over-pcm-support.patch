From 5976b5d8b3b572b757203965c1519bf370610a78 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Marc-Andr=C3=A9=20Lureau?= <marcandre.lureau@gmail.com>
Date: Wed, 21 Jan 2009 18:54:11 +0200
Subject: [PATCH 07/25] bluetooth: basic sco over pcm support

---
 src/modules/bluetooth/module-bluetooth-device.c   |  113 ++++++++++++++-------
 src/modules/bluetooth/module-bluetooth-discover.c |   31 ++++++-
 2 files changed, 105 insertions(+), 39 deletions(-)

diff --git a/src/modules/bluetooth/module-bluetooth-device.c b/src/modules/bluetooth/module-bluetooth-device.c
index f814084..2734eb5 100644
--- a/src/modules/bluetooth/module-bluetooth-device.c
+++ b/src/modules/bluetooth/module-bluetooth-device.c
@@ -43,6 +43,7 @@
 #include <pulsecore/rtpoll.h>
 #include <pulsecore/time-smoother.h>
 #include <pulsecore/rtclock.h>
+#include <pulsecore/namereg.h>
 
 #include "../dbus-util.h"
 #include "module-bluetooth-device-symdef.h"
@@ -68,7 +69,9 @@ PA_MODULE_USAGE(
         "profile=<a2dp|hsp> "
         "rate=<sample rate> "
         "channels=<number of channels> "
-        "path=<device object path>");
+        "path=<device object path> "
+        "over_sink=<name of sink> "
+        "over_source=<name of source>");
 
 struct bt_a2dp {
     sbc_capabilities_t sbc_capabilities;
@@ -115,6 +118,9 @@ struct userdata {
     struct bt_a2dp a2dp;
     char *path;
     pa_dbus_connection *conn;
+
+    pa_sink *over_sink;
+    pa_source *over_source;
 };
 
 static const char* const valid_modargs[] = {
@@ -124,6 +130,8 @@ static const char* const valid_modargs[] = {
     "rate",
     "channels",
     "path",
+    "over_sink",
+    "over_source",
     NULL
 };
 
@@ -991,6 +999,20 @@ int pa__init(pa_module* m) {
     }
     u->ss.channels = (uint8_t) channels;
 
+    if (pa_streq(u->profile, "hsp") &&
+        pa_modargs_get_value(ma, "over_sink", NULL) &&
+        !(u->over_sink = pa_namereg_get(m->core, pa_modargs_get_value(ma, "over_sink", NULL), PA_NAMEREG_SINK))) {
+        pa_log("Over sink not found");
+        goto fail;
+    }
+
+    if (pa_streq(u->profile, "hsp") &&
+        pa_modargs_get_value(ma, "over_source", NULL) &&
+        !(u->over_source = pa_namereg_get(m->core, pa_modargs_get_value(ma, "over_source", NULL), PA_NAMEREG_SOURCE))) {
+        pa_log("Over source not found");
+        goto fail;
+    }
+
     /* connect to the bluez audio service */
     u->audioservice_fd = bt_audio_service_open();
     if (u->audioservice_fd <= 0) {
@@ -1023,43 +1045,60 @@ int pa__init(pa_module* m) {
     }
     pa_log_debug("Got the device socket");
 
-    /* create sink */
-    pa_sink_new_data_init(&data);
-    data.driver = __FILE__;
-    data.module = m;
-    pa_sink_new_data_set_name(&data, u->name);
-    pa_sink_new_data_set_sample_spec(&data, &u->ss);
-    pa_proplist_sets(data.proplist, PA_PROP_DEVICE_STRING, u->name);
-    pa_proplist_setf(data.proplist, PA_PROP_DEVICE_DESCRIPTION, "Bluetooth %s '%s' (%s)", u->strtransport, u->name, u->addr);
-    pa_proplist_sets(data.proplist, "bluetooth.protocol", u->profile);
-    pa_proplist_setf(data.proplist, PA_PROP_DEVICE_API, "bluez");
-    pa_proplist_setf(data.proplist, PA_PROP_DEVICE_CLASS, "sound");
-    pa_proplist_setf(data.proplist, PA_PROP_DEVICE_CONNECTOR, "bluetooth");
-/*     pa_proplist_setf(data.proplist, PA_PROP_DEVICE_FORM_FACTOR, "headset"); /\*FIXME*\/ */
-/*     pa_proplist_setf(data.proplist, PA_PROP_DEVICE_VENDOR_PRODUCT_ID, "product_id"); /\*FIXME*\/ */
-/*     pa_proplist_setf(data.proplist, PA_PROP_DEVICE_SERIAL, "serial"); /\*FIXME*\/ */
-    u->sink = pa_sink_new(m->core, &data, PA_SINK_HARDWARE|PA_SINK_LATENCY);
-    pa_sink_new_data_done(&data);
-    if (!u->sink) {
-        pa_log_error("Failed to create sink");
-        goto fail;
-    }
-    u->sink->userdata = u;
-    u->sink->parent.process_msg = sink_process_msg;
-    pa_sink_set_asyncmsgq(u->sink, u->thread_mq.inq);
-    pa_sink_set_rtpoll(u->sink, u->rtpoll);
-
-    u->rtpoll_item = pa_rtpoll_item_new(u->rtpoll, PA_RTPOLL_NEVER, 1);
-    pollfd = pa_rtpoll_item_get_pollfd(u->rtpoll_item, NULL);
-    pollfd->fd = u->stream_fd;
-    pollfd->events = pollfd->revents = 0;
-
-    /* start rt thread */
-    if (!(u->thread = pa_thread_new(thread_func, u))) {
-        pa_log_error("Failed to create IO thread");
-        goto fail;
+    if (!u->over_sink) {
+        /* create sink */
+        pa_sink_new_data_init(&data);
+        data.driver = __FILE__;
+        data.module = m;
+        pa_sink_new_data_set_name(&data, u->name);
+        pa_sink_new_data_set_sample_spec(&data, &u->ss);
+        pa_proplist_sets(data.proplist, PA_PROP_DEVICE_STRING, u->name);
+        pa_proplist_setf(data.proplist, PA_PROP_DEVICE_DESCRIPTION, "Bluetooth %s '%s' (%s)", u->strtransport, u->name, u->addr);
+        pa_proplist_sets(data.proplist, "bluetooth.protocol", u->profile);
+        pa_proplist_setf(data.proplist, PA_PROP_DEVICE_API, "bluez");
+        pa_proplist_setf(data.proplist, PA_PROP_DEVICE_CLASS, "sound");
+        pa_proplist_setf(data.proplist, PA_PROP_DEVICE_CONNECTOR, "bluetooth");
+        /* pa_proplist_setf(data.proplist, PA_PROP_DEVICE_FORM_FACTOR, "headset"); /\*FIXME*\/ */
+        /* pa_proplist_setf(data.proplist, PA_PROP_DEVICE_VENDOR_PRODUCT_ID, "product_id"); /\*FIXME*\/ */
+        /* pa_proplist_setf(data.proplist, PA_PROP_DEVICE_SERIAL, "serial"); /\*FIXME*\/ */
+        u->sink = pa_sink_new(m->core, &data, PA_SINK_HARDWARE|PA_SINK_LATENCY);
+        pa_sink_new_data_done(&data);
+        if (!u->sink) {
+            pa_log_error("Failed to create sink");
+            goto fail;
+        }
+        u->sink->userdata = u;
+        u->sink->parent.process_msg = sink_process_msg;
+        pa_sink_set_asyncmsgq(u->sink, u->thread_mq.inq);
+        pa_sink_set_rtpoll(u->sink, u->rtpoll);
+
+        u->rtpoll_item = pa_rtpoll_item_new(u->rtpoll, PA_RTPOLL_NEVER, 1);
+        pollfd = pa_rtpoll_item_get_pollfd(u->rtpoll_item, NULL);
+        pollfd->fd = u->stream_fd;
+        pollfd->events = pollfd->revents = 0;
+
+        /* start rt thread */
+        if (!(u->thread = pa_thread_new(thread_func, u))) {
+            pa_log_error("Failed to create IO thread");
+            goto fail;
+        }
+        pa_sink_put(u->sink);
+    } else {
+        /* pa_proplist *p; */
+
+        /* p = pa_proplist_new(); */
+        /* pa_proplist_setf(p, PA_PROP_DEVICE_DESCRIPTION, "Bluetooth %s '%s' (%s)", u->strtransport, u->name, u->addr); */
+        /* pa_proplist_sets(p, "bluetooth.protocol", u->profile); */
+        /* pa_proplist_setf(p, PA_PROP_DEVICE_API, "bluez"); */
+        /* pa_proplist_setf(p, PA_PROP_DEVICE_CLASS, "sound"); */
+        /* pa_proplist_setf(p, PA_PROP_DEVICE_CONNECTOR, "bluetooth"); */
+
+	/* pa_proplist_update(u->over_sink, PA_UPDATE_MERGE, p); */
+	/* pa_proplist_update(u->over_source, PA_UPDATE_MERGE, p); */
+
+	/* pa_proplist_free(p); */
     }
-    pa_sink_put(u->sink);
+
     if (!u->path)
         goto end;
 
diff --git a/src/modules/bluetooth/module-bluetooth-discover.c b/src/modules/bluetooth/module-bluetooth-discover.c
index 1bc05c0..6a9d70a 100644
--- a/src/modules/bluetooth/module-bluetooth-discover.c
+++ b/src/modules/bluetooth/module-bluetooth-discover.c
@@ -40,7 +40,15 @@
 PA_MODULE_AUTHOR("Joao Paulo Rechi Vita");
 PA_MODULE_DESCRIPTION("Detect available bluetooth audio devices and load bluetooth audio drivers");
 PA_MODULE_VERSION(PACKAGE_VERSION);
-PA_MODULE_USAGE("");
+PA_MODULE_USAGE(
+        "over_sink=<name of sink> "
+        "over_source=<name of source>");
+
+static const char* const valid_modargs[] = {
+    "over_sink",
+    "over_source",
+    NULL
+};
 
 struct module {
     char *profile;
@@ -76,6 +84,7 @@ struct device {
 
 struct userdata {
     pa_module *module;
+    pa_modargs *ma;
     pa_dbus_connection *conn;
     dbus_int32_t dbus_data_slot;
     PA_LLIST_HEAD(struct device, device_list);
@@ -368,7 +377,7 @@ finish:
 }
 
 static void load_module_for_device(struct userdata *u, struct device *d, const char *profile) {
-    char *args;
+    char *args, *tmp;
     pa_module *pa_m;
     struct module *m;
 
@@ -377,6 +386,14 @@ static void load_module_for_device(struct userdata *u, struct device *d, const c
 
     get_device_properties(u, d);
     args = pa_sprintf_malloc("sink_name=\"%s\" address=\"%s\" profile=\"%s\" path=\"%s\"", d->name, d->address, profile, d->object_path);
+
+    if (pa_modargs_get_value(u->ma, "over_sink", NULL) &&
+        pa_modargs_get_value(u->ma, "over_source", NULL)) {
+        tmp = pa_sprintf_malloc("%s over_sink=\"%s\" over_source=\"%s\"", args, pa_modargs_get_value(u->ma, "over_sink", NULL), pa_modargs_get_value(u->ma, "over_source", NULL));
+        pa_xfree(args);
+        args = tmp;
+    }
+
     pa_m = pa_module_load(u->module->core, "module-bluetooth-device", args);
     pa_xfree(args);
 
@@ -783,19 +800,29 @@ void pa__done(pa_module* m) {
         pa_dbus_connection_unref(u->conn);
     }
 
+    if (u->ma)
+        pa_modargs_free(u->ma);
+
     pa_xfree(u);
 }
 
 int pa__init(pa_module* m) {
     DBusError err;
     struct userdata *u;
+    pa_modargs *ma;
 
     pa_assert(m);
     dbus_error_init(&err);
 
+    if (!(ma = pa_modargs_new(m->argument, valid_modargs))) {
+        pa_log_error("Failed to parse module arguments");
+        return;
+    }
+
     m->userdata = u = pa_xnew(struct userdata, 1);
     u->dbus_data_slot = -1;
     u->module = m;
+    u->ma = ma;
     PA_LLIST_HEAD_INIT(struct device, u->device_list);
     PA_LLIST_HEAD_INIT(DBusPendingCall, u->dbus_pending_list);
 
-- 
1.6.1.224.gb56c

