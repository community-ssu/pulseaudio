From 17979bca38e2f4d27bcf0482b7b0309f529b52a2 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Juho=20H=C3=A4m=C3=A4l=C3=A4inen?= <ext-juho.hamalainen@nokia.com>
Date: Wed, 25 Nov 2009 10:39:31 +0200
Subject: [PATCH] flat-sink: check the path down to master sink for flat-volume enabled

---
 src/pulsecore/sink-input.c |   16 ++++++------
 src/pulsecore/sink.c       |   52 ++++++++++++++++++++++++++++++-------------
 src/pulsecore/sink.h       |    1 +
 3 files changed, 45 insertions(+), 24 deletions(-)

diff --git a/src/pulsecore/sink-input.c b/src/pulsecore/sink-input.c
index 9bcd592..f129404 100644
--- a/src/pulsecore/sink-input.c
+++ b/src/pulsecore/sink-input.c
@@ -269,7 +269,7 @@ int pa_sink_input_new(
     i->sample_spec = data->sample_spec;
     i->channel_map = data->channel_map;
 
-    if ((i->sink->flags & PA_SINK_FLAT_VOLUME) && !data->volume_is_absolute) {
+    if ((i->sink->flags & PA_SINK_FLAT_VOLUME) && !data->volume_is_absolute && pa_sink_flat_volume_enabled(i->sink)) {
         /* When the 'absolute' bool is not set then we'll treat the volume
          * as relative to the sink volume even in flat volume mode */
 
@@ -446,7 +446,7 @@ void pa_sink_input_unlink(pa_sink_input *i) {
 
     if (linked && i->sink) {
         /* We might need to update the sink's volume if we are in flat volume mode. */
-        if (i->sink->flags & PA_SINK_FLAT_VOLUME) {
+        if ((i->sink->flags & PA_SINK_FLAT_VOLUME) && pa_sink_flat_volume_enabled(i->sink)) {
             pa_cvolume new_volume;
             pa_sink_update_flat_volume(i->sink, &new_volume);
             pa_sink_set_volume(i->sink, &new_volume, FALSE, FALSE, FALSE);
@@ -524,7 +524,7 @@ void pa_sink_input_put(pa_sink_input *i) {
     i->state = state;
 
     /* We might need to update the sink's volume if we are in flat volume mode. */
-    if (i->sink->flags & PA_SINK_FLAT_VOLUME) {
+    if ((i->sink->flags & PA_SINK_FLAT_VOLUME) && pa_sink_flat_volume_enabled(i->sink)) {
         pa_cvolume new_volume;
         pa_sink_update_flat_volume(i->sink, &new_volume);
         pa_sink_set_volume(i->sink, &new_volume, FALSE, FALSE, FALSE);
@@ -888,7 +888,7 @@ void pa_sink_input_set_volume(pa_sink_input *i, const pa_cvolume *volume, pa_boo
     pa_assert(pa_cvolume_valid(volume));
     pa_assert(pa_cvolume_compatible(volume, &i->sample_spec));
 
-    if ((i->sink->flags & PA_SINK_FLAT_VOLUME) && !absolute) {
+    if ((i->sink->flags & PA_SINK_FLAT_VOLUME) && !absolute && pa_sink_flat_volume_enabled(i->sink)) {
         v = i->sink->reference_volume;
         pa_cvolume_remap(&v, &i->sink->channel_map, &i->channel_map);
         volume = pa_sw_cvolume_multiply(&v, &v, volume);
@@ -900,7 +900,7 @@ void pa_sink_input_set_volume(pa_sink_input *i, const pa_cvolume *volume, pa_boo
     i->virtual_volume = *volume;
     i->save_volume = save;
 
-    if (i->sink->flags & PA_SINK_FLAT_VOLUME) {
+    if ((i->sink->flags & PA_SINK_FLAT_VOLUME) && pa_sink_flat_volume_enabled(i->sink)) {
         pa_cvolume new_volume;
 
         /* We are in flat volume mode, so let's update all sink input
@@ -931,7 +931,7 @@ pa_cvolume *pa_sink_input_get_volume(pa_sink_input *i, pa_cvolume *volume, pa_bo
     pa_sink_input_assert_ref(i);
     pa_assert(PA_SINK_INPUT_IS_LINKED(i->state));
 
-    if ((i->sink->flags & PA_SINK_FLAT_VOLUME) && !absolute) {
+    if ((i->sink->flags & PA_SINK_FLAT_VOLUME) && !absolute && pa_sink_flat_volume_enabled(i->sink)) {
         pa_cvolume v = i->sink->reference_volume;
         pa_cvolume_remap(&v, &i->sink->channel_map, &i->channel_map);
         pa_sw_cvolume_divide(volume, &i->virtual_volume, &v);
@@ -1154,7 +1154,7 @@ int pa_sink_input_start_move(pa_sink_input *i) {
     if (pa_sink_input_get_state(i) == PA_SINK_INPUT_CORKED)
         pa_assert_se(i->sink->n_corked-- >= 1);
 
-    if (i->sink->flags & PA_SINK_FLAT_VOLUME) {
+    if ((i->sink->flags & PA_SINK_FLAT_VOLUME) && pa_sink_flat_volume_enabled(i->sink)) {
         pa_cvolume new_volume;
 
         /* Make the virtual volume relative */
@@ -1249,7 +1249,7 @@ int pa_sink_input_finish_move(pa_sink_input *i, pa_sink *dest, pa_bool_t save) {
     }
     pa_sink_update_status(dest);
 
-    if (i->sink->flags & PA_SINK_FLAT_VOLUME) {
+    if ((i->sink->flags & PA_SINK_FLAT_VOLUME) && pa_sink_flat_volume_enabled(i->sink)) {
         pa_cvolume new_volume;
 
         /* Make relative volume absolute again */
diff --git a/src/pulsecore/sink.c b/src/pulsecore/sink.c
index d70750a..ec011d5 100644
--- a/src/pulsecore/sink.c
+++ b/src/pulsecore/sink.c
@@ -1050,7 +1050,7 @@ static void get_maximum_input_volume(pa_sink *s, pa_cvolume *max_volume, const p
         unsigned c;
         pa_cvolume remapped_volume;
 
-        if (i->origin_sink) {
+        if (i->origin_sink && pa_sink_flat_volume_enabled(i->origin_sink)) {
             /* go recursively on slaved flatten sink
              * and ignore this intermediate sink-input. */
             get_maximum_input_volume(i->origin_sink, max_volume, channel_map);
@@ -1077,7 +1077,7 @@ static void update_input_soft_volume(pa_sink *s, const pa_cvolume *new_volume, c
     for (i = PA_SINK_INPUT(pa_idxset_first(s->inputs, &idx)); i; i = PA_SINK_INPUT(pa_idxset_next(s->inputs, &idx))) {
         pa_cvolume remapped_new_volume;
 
-        if (i->origin_sink) {
+        if (i->origin_sink && pa_sink_flat_volume_enabled(i->origin_sink)) {
             /* go recursively on slaved flatten sink
              * and ignore this intermediate sink-input. */
             update_input_soft_volume(i->origin_sink, new_volume, channel_map);
@@ -1220,6 +1220,20 @@ void pa_sink_propagate_flat_volume(pa_sink *s) {
     propagate_flat_volume(s, s);
 }
 
+/* Go through all sinks to the master sink, flat-volume is disabled
+ * if any of sinks in the path have flat-volume disabled. */
+pa_bool_t pa_sink_flat_volume_enabled(pa_sink *s) {
+    pa_sink_assert_ref(s);
+
+    do {
+        if (!(s->flags & PA_SINK_FLAT_VOLUME))
+            return FALSE;
+
+    } while ((s = s->flat_volume_sink));
+
+    return TRUE;
+}
+
 static pa_bool_t sink_set_volume(pa_sink *s, const pa_cvolume *v, const pa_channel_map *channel_map, pa_bool_t become_reference) {
     pa_cvolume volume;
     pa_bool_t virtual_volume_changed;
@@ -1238,7 +1252,7 @@ static pa_bool_t sink_set_volume(pa_sink *s, const pa_cvolume *v, const pa_chann
     virtual_volume_changed = !pa_cvolume_equal(&volume, &s->virtual_volume);
     s->virtual_volume = volume;
 
-    if (s->flat_volume_sink)
+    if (s->flat_volume_sink && pa_sink_flat_volume_enabled(s))
         /* flatten sink have same virtual volume as their master sink
          * but no soft volume */
         pa_cvolume_reset(&s->soft_volume, s->sample_spec.channels);
@@ -1252,12 +1266,14 @@ static pa_bool_t sink_set_volume(pa_sink *s, const pa_cvolume *v, const pa_chann
     if (!(s->flags & PA_SINK_FLAT_VOLUME))
         return virtual_volume_changed;
 
-    for (i = PA_SINK_INPUT(pa_idxset_first(s->inputs, &idx)); i; i = PA_SINK_INPUT(pa_idxset_next(s->inputs, &idx))) {
-        if (!i->origin_sink)
-            continue;
-        /* go recursively on slaved flatten sink
-         * and ignore this intermediate sink-input. */
-        virtual_volume_changed |= sink_set_volume(i->origin_sink, v, channel_map, become_reference);
+    if (pa_sink_flat_volume_enabled(s)) {
+        for (i = PA_SINK_INPUT(pa_idxset_first(s->inputs, &idx)); i; i = PA_SINK_INPUT(pa_idxset_next(s->inputs, &idx))) {
+            if (!i->origin_sink)
+                continue;
+            /* go recursively on slaved flatten sink
+             * and ignore this intermediate sink-input. */
+            virtual_volume_changed |= sink_set_volume(i->origin_sink, v, channel_map, become_reference);
+        }
     }
 
     return virtual_volume_changed;
@@ -1274,12 +1290,14 @@ void pa_sink_set_volume(pa_sink *s, const pa_cvolume *volume, pa_bool_t propagat
 
     channel_map = &s->channel_map;
     /* go to the root-sink of the sinks, beware volume is not remapped */
-    while (s->flat_volume_sink)
-        s = s->flat_volume_sink;
+    if (pa_sink_flat_volume_enabled(s)) {
+        while (s->flat_volume_sink)
+            s = s->flat_volume_sink;
+    }
 
     /* Propagate this volume change back to the inputs */
     if (sink_set_volume(s, volume, channel_map, become_reference))
-        if (propagate && (s->flags & PA_SINK_FLAT_VOLUME))
+        if (propagate && (s->flags & PA_SINK_FLAT_VOLUME) && pa_sink_flat_volume_enabled(s))
             pa_sink_propagate_flat_volume(s);
 
     if (s->set_volume) {
@@ -1329,7 +1347,7 @@ const pa_cvolume *pa_sink_get_volume(pa_sink *s, pa_bool_t force_refresh, pa_boo
 
             s->reference_volume = s->virtual_volume;
 
-            if (s->flags & PA_SINK_FLAT_VOLUME)
+            if ((s->flags & PA_SINK_FLAT_VOLUME) && pa_sink_flat_volume_enabled(s))
                 pa_sink_propagate_flat_volume(s);
 
             pa_subscription_post(s->core, PA_SUBSCRIPTION_EVENT_SINK|PA_SUBSCRIPTION_EVENT_CHANGE, s->index);
@@ -1350,7 +1368,7 @@ void pa_sink_volume_changed(pa_sink *s, const pa_cvolume *new_volume) {
 
     s->reference_volume = s->virtual_volume = *new_volume;
 
-    if (s->flags & PA_SINK_FLAT_VOLUME)
+    if ((s->flags & PA_SINK_FLAT_VOLUME) && pa_sink_flat_volume_enabled(s))
         pa_sink_propagate_flat_volume(s);
 
     pa_subscription_post(s->core, PA_SUBSCRIPTION_EVENT_SINK|PA_SUBSCRIPTION_EVENT_CHANGE, s->index);
@@ -1557,8 +1575,10 @@ static void set_sink_volume_within_thread(pa_sink *s) {
 static void set_sink_volume_flat_sink_within_thread(pa_sink *s) {
     pa_sink_assert_ref(s);
 
-    while (s->flat_volume_sink)
-        s = s->flat_volume_sink;
+    if (pa_sink_flat_volume_enabled(s)) {
+        while (s->flat_volume_sink)
+            s = s->flat_volume_sink;
+    }
 
     PA_MSGOBJECT(s)->process_msg(PA_MSGOBJECT(s), PA_SINK_MESSAGE_SET_VOLUME_FLAT_SINK, NULL, 0, NULL);
 }
diff --git a/src/pulsecore/sink.h b/src/pulsecore/sink.h
index 5c7bc33..46f3fe2 100644
--- a/src/pulsecore/sink.h
+++ b/src/pulsecore/sink.h
@@ -259,6 +259,7 @@ int pa_sink_suspend_all(pa_core *c, pa_bool_t suspend);
 
 void pa_sink_update_flat_volume(pa_sink *s, pa_cvolume *new_volume);
 void pa_sink_propagate_flat_volume(pa_sink *s);
+pa_bool_t pa_sink_flat_volume_enabled(pa_sink *s);
 
 void pa_sink_set_volume(pa_sink *sink, const pa_cvolume *volume, pa_bool_t propagate, pa_bool_t sendmsg, pa_bool_t become_reference);
 const pa_cvolume *pa_sink_get_volume(pa_sink *sink, pa_bool_t force_refresh, pa_bool_t reference);
-- 
1.6.0.4

