From ace47dd0de8dade79914255b3954bb8a72df20dc Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Marc-Andr=C3=A9=20Lureau?= <marc-andre.lureau@nokia.com>
Date: Tue, 10 Mar 2009 17:13:17 +0200
Subject: [PATCH] pulsecore: get_maximum_input_volume recursively

---
 src/pulsecore/sink.c |   40 +++++++++++++++++++++++++++++-----------
 1 files changed, 29 insertions(+), 11 deletions(-)

diff --git a/src/pulsecore/sink.c b/src/pulsecore/sink.c
index 95978c9..fbc9b52 100644
--- a/src/pulsecore/sink.c
+++ b/src/pulsecore/sink.c
@@ -960,6 +960,34 @@ pa_usec_t pa_sink_get_latency(pa_sink *s) {
 }
 
 /* Called from main thread */
+static void get_maximum_input_volume(pa_sink *s, pa_cvolume *max_volume, const pa_channel_map *channel_map) {
+    pa_sink_input *i;
+    uint32_t idx;
+
+    pa_sink_assert_ref(s);
+    pa_assert(max_volume);
+
+    for (i = PA_SINK_INPUT(pa_idxset_first(s->inputs, &idx)); i; i = PA_SINK_INPUT(pa_idxset_next(s->inputs, &idx))) {
+        unsigned c;
+        pa_cvolume remapped_volume;
+
+        if (i->origin_sink) {
+            /* go recursively on slaved flatten sink
+             * and ignore this intermediate sink-input. */
+            get_maximum_input_volume(i->origin_sink, max_volume, channel_map);
+            continue;
+        }
+
+        remapped_volume = i->virtual_volume;
+        pa_cvolume_remap(&remapped_volume, &i->channel_map, channel_map);
+
+        for (c = 0; c < max_volume->channels; c++)
+            if (remapped_volume.values[c] > max_volume->values[c])
+                max_volume->values[c] = remapped_volume.values[c];
+    }
+}
+
+/* Called from main thread */
 void pa_sink_update_flat_volume(pa_sink *s, pa_cvolume *new_volume, pa_sink_input *new_input) {
     pa_sink_input *i;
     uint32_t idx;
@@ -986,17 +1014,7 @@ void pa_sink_update_flat_volume(pa_sink *s, pa_cvolume *new_volume, pa_sink_inpu
 
     /* First let's determine the new maximum volume of all inputs
      * connected to this sink */
-    for (i = PA_SINK_INPUT(pa_idxset_first(s->inputs, &idx)); i; i = PA_SINK_INPUT(pa_idxset_next(s->inputs, &idx))) {
-        unsigned c;
-        pa_cvolume remapped_volume;
-
-        remapped_volume = i->virtual_volume;
-        pa_cvolume_remap(&remapped_volume, &i->channel_map, &s->channel_map);
-
-        for (c = 0; c < new_volume->channels; c++)
-            if (remapped_volume.values[c] > new_volume->values[c])
-                new_volume->values[c] = remapped_volume.values[c];
-    }
+    get_maximum_input_volume(s, new_volume, &s->channel_map);
 
     /* Then, let's update the soft volumes of all inputs connected
      * to this sink */
-- 
1.5.6.3

