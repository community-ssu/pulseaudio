From 25ac398ead40e16bad9a2a8ba83a1830c314d7f6 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Marc-Andr=C3=A9=20Lureau?= <marc-andre.lureau@nokia.com>
Date: Sun, 29 Mar 2009 19:55:23 +0300
Subject: [PATCH 16/17] volume: tosquash, remove some debug

---
 src/modules/alsa/module-alsa-sink-volume.c |   29 +---------------------------
 1 files changed, 1 insertions(+), 28 deletions(-)

diff --git a/src/modules/alsa/module-alsa-sink-volume.c b/src/modules/alsa/module-alsa-sink-volume.c
index 4e931fb..aa40de2 100644
--- a/src/modules/alsa/module-alsa-sink-volume.c
+++ b/src/modules/alsa/module-alsa-sink-volume.c
@@ -197,7 +197,6 @@ static int mixer_callback(snd_mixer_elem_t *elem, unsigned int mask) {
     pa_assert(u);
     pa_assert(u->mixer_handle);
 
-    pa_log_debug("some alsa mixer value changed");
 
 
     if (mask == SND_CTL_EVENT_MASK_REMOVE)
@@ -205,7 +204,6 @@ static int mixer_callback(snd_mixer_elem_t *elem, unsigned int mask) {
 
     if (mask & SND_CTL_EVENT_MASK_VALUE) {
         if (!u->sink) {
-            pa_log_debug("The associated sink does not exist any more");
             return 0;
         }
 
@@ -246,8 +244,6 @@ static long mB_to_hw_mixer_value(mixer_control_t *m, long mB) {
     else
         ret = element + 1 + m->tuned_volume_min;
 
-    pa_log_debug("Mixer %s: %ld mB equals %ld hw val", m->name, mB, ret);
-
     return ret;
 }
 
@@ -265,7 +261,6 @@ static void fill_tuning_table_range(struct mixer_control_t *m, size_t start, siz
     pa_assert(m);
     pa_assert(end > start);
     mB_step  = (double)(mBend-mBstart)/(double)(end-start);
-    pa_log_debug("Filling tuning table from %d:%ld to %d:%ld, %f steps", start, mBstart, end, mBend, mB_step);
 
     for (i = 0; i <= (int)(end - start); i++)
         m->tuning_table[start + i] = lrint((double)mBstart + mB_step*i);
@@ -275,8 +270,6 @@ static void print_tuning_table(struct mixer_control_t *m) {
     int i;
     pa_assert(m);
     pa_assert(m->tuning_table);
-    pa_log_debug("Tuning table for mixer %s: %d elements from %ld to %ld",
-                 m->name, m->tuning_table_max+1, m->tuned_volume_min, m->tuned_volume_max);
 
     for(i=0; i<= m->tuning_table_max; i++)
         pa_log_debug("%ld:%ld", i+m->tuned_volume_min, m->tuning_table[i]);
@@ -290,8 +283,6 @@ static void fill_tuning_table_from_dB_info(struct mixer_control_t *m) {
     m->tuning_table_max = m->tuning_table_allocated_length-1;
     fill_tuning_table_range(m, 0, m->tuning_table_max, m->hw_dB_min - m->hw_dB_max, 0);
     m->tuning_table_filled = TRUE;
-
-    print_tuning_table(m);
 }
 
 static void sink_get_volume_cb(pa_sink *s) {
@@ -848,7 +839,7 @@ static int load_mixer_tuning(struct userdata *u, struct mixer_control_t *m) {
             field++;
         }
         if (error) {
-            pa_log_error("Can parse \"%s\" in field %d of element %d in: %s",
+            pa_log_error("Can't parse \"%s\" in field %d of element %d in: %s",
                          error, field, element_count, tuning);
             pa_xfree((void *)error);
             pa_xfree((void *)element);
@@ -867,8 +858,6 @@ static int load_mixer_tuning(struct userdata *u, struct mixer_control_t *m) {
         if (element_count == 1) {
             m->tuned_volume_min = hw_vol;
         } else {
-            pa_log_debug("Generating tuning for range %ld:%ld - %ld:%ld",
-                         prev_hw_vol, prev_mB_vol, hw_vol, mB_vol);
             if (prev_hw_vol > hw_vol || prev_mB_vol > mB_vol) {
                 pa_log_error("The tuning values should be in increasing order, problem with element %d of %s",
                              element_count, tuning);
@@ -890,8 +879,6 @@ static int load_mixer_tuning(struct userdata *u, struct mixer_control_t *m) {
     m->tuned_volume_max = hw_vol;
     m->tuning_table_max = m->tuned_volume_max - m->tuned_volume_min;
     m->tuning_table_filled = TRUE;
-    pa_log_debug("Tuning parameter parsed");
-    print_tuning_table(m);
     return 0;
 }
 
@@ -908,7 +895,6 @@ static int set_mixer_state(struct userdata *u, const char *value_str) {
     if (mixer && mode && (m = get_mixer_elem_by_name(u, mixer))) {
 
         if (strcmp(mode, PROP_MIXER_CONTROL) == 0) {
-            pa_log_info("%s: set mixer %s active", u->device_name, mixer);
             if (set_control_mixer_elem(u, m)) {
                 pa_log_error("%s: Setting control mixer %s failed", u->device_name, mixer);
                 ret = -1;
@@ -945,14 +931,12 @@ static int set_mixer_state(struct userdata *u, const char *value_str) {
             }
 
             if (snd_mixer_selem_has_playback_switch(m->mixer_elem))  {
-                pa_log_debug("Set mixer %s mute control to %s", m->name, mute_state ? "muted" : "unmuted");
                 if ((err = snd_mixer_selem_set_playback_switch_all(m->mixer_elem, !mute_state)) < 0) {
                     pa_log_error("%s: Setting mute state of %s to %d failed: %s",
                                  u->device_name, mixer, mute_state, snd_strerror(err));
                 }
             }
 
-            pa_log_debug("Set hw mixer %s volume to %d", m->name, hw_volume);
             if ((err = snd_mixer_selem_set_playback_volume_all(m->mixer_elem, (long)hw_volume)) < 0) {
                 pa_log_error("%s: Setting volume of %s to %d failed: %s",
                              u->device_name, mixer, hw_volume, snd_strerror(err));
@@ -984,8 +968,6 @@ static int update_mixer_setup(struct userdata *u, const char *value_list) {
     pa_assert(u);
     pa_assert(u->sink);
 
-    pa_log_info("%s: update mixer setup", u->device_name);
-
     /* store volumes from currently active mixer */
     store_active_mixer_volume(u);
 
@@ -1007,7 +989,6 @@ static int update_mixer_setup(struct userdata *u, const char *value_list) {
 
     /* update previously stored volumes to sink */
     if (u->active_mixer) {
-        pa_log_info("%s: update stored volumes to sink", u->device_name);
         if (u->active_mixer->cache_volume.channels > 0) {
             pa_sink_set_volume(u->sink, &u->active_mixer->cache_volume, TRUE, TRUE);
             pa_sink_set_mute(u->sink, u->active_mixer->cache_muted);
@@ -1018,7 +999,6 @@ static int update_mixer_setup(struct userdata *u, const char *value_list) {
                idea. Let's use default values.
             */
             pa_cvolume cvol;
-            pa_log_info("No cached volume and mute state found, using defaults");
             pa_cvolume_set(&cvol, u->sink->sample_spec.channels,
                            pa_sw_volume_from_dB(DEFAULT_MIXER_DB_VALUE_ON_FIRST_BOOT));
             pa_sink_set_volume(u->sink, &cvol, TRUE, TRUE);
@@ -1039,8 +1019,6 @@ static pa_hook_result_t sink_proplist_changed_hook_callback(pa_core *c, pa_sink
         return PA_HOOK_OK;
     }
 
-    pa_log_debug("%s: sink_proplist_changed_hook_callback", u->device_name);
-
     pa_assert(u);
     pa_assert(s);
 
@@ -1149,8 +1127,6 @@ static int store_mixer_volume(struct userdata *u, struct mixer_control_t *m) {
     data.dptr = (void*) &entry;
     data.dsize = sizeof(entry);
 
-    pa_log_info("%s: storing volume/mute for mixer %s. vol %d", u->device_name, name, m->cache_volume.values[0]);
-
     gdbm_store(u->gdbm_file, key, data, GDBM_REPLACE);
 
     pa_xfree(name);
@@ -1204,8 +1180,6 @@ static void store_active_mixer_volume(struct userdata *u) {
         return;
     }
 
-    pa_log_debug("Store current control mixer - %s - value to cache", m->name);
-
     if (!u->sink) {
         pa_log_debug("The sink was already unloaded, storing cached values");
     }
@@ -1229,7 +1203,6 @@ static pa_hook_result_t sink_unlink_hook_callback(pa_core *c, pa_sink *s, struct
         return PA_HOOK_OK;
     }
 
-    pa_log_info("The sink we were connected to was unkinked");
     u->sink = NULL;
 
     return PA_HOOK_OK;
-- 
1.6.2.rc1.13.gfd76c.dirty

