From 19e63a207eb97311146fe2cd561b721a3ff52841 Mon Sep 17 00:00:00 2001
From: Pekka Ervasti <peervast@gmail.com>
Date: Wed, 6 May 2009 18:02:40 +0300
Subject: [PATCH] alsa-old: delay by snd_pcm_htimestamp

---
 src/modules/alsa/module-alsa-sink-old.c   |   37 ++++++++++++++++++++++++----
 src/modules/alsa/module-alsa-source-old.c |   35 ++++++++++++++++++++++----
 2 files changed, 60 insertions(+), 12 deletions(-)

diff --git a/src/modules/alsa/module-alsa-sink-old.c b/src/modules/alsa/module-alsa-sink-old.c
index 90a1eb6..fc0c3bc 100644
--- a/src/modules/alsa/module-alsa-sink-old.c
+++ b/src/modules/alsa/module-alsa-sink-old.c
@@ -31,6 +31,7 @@
 
 #include <pulse/xmalloc.h>
 #include <pulse/util.h>
+#include <pulse/timeval.h>
 
 #ifdef HAVE_VALGRIND_MEMCHECK_H
 #include <valgrind/memcheck.h>
@@ -50,6 +51,7 @@
 #include <pulsecore/thread-mq.h>
 #include <pulsecore/rtpoll.h>
 #include <pulsecore/atomic.h>
+#include <pulsecore/rtclock.h>
 
 #include "alsa-util.h"
 #include "module-alsa-sink-old-symdef.h"
@@ -362,6 +364,27 @@ static int unix_write(struct userdata *u) {
     }
 }
 
+static int sink_get_latency_by_timestamps(struct userdata *u, pa_usec_t *d) {
+    snd_pcm_uframes_t avail;
+    snd_htimestamp_t tstamp;
+    struct timeval tv_now;
+    struct timespec ts_dma;
+    pa_usec_t fragment_usec;
+    
+    if (snd_pcm_htimestamp(u->pcm_handle, &avail, &tstamp) < 0)
+        return -1;
+
+    pa_rtclock_get(&tv_now);
+
+    ts_dma.tv_sec = tstamp.tv_sec;
+    ts_dma.tv_nsec = tstamp.tv_nsec;
+
+    fragment_usec = pa_bytes_to_usec(u->fragment_size, &u->sink->sample_spec);
+    *d = pa_timespec_load(&ts_dma) + fragment_usec - pa_timeval_load(&tv_now);
+
+    return 0;
+}
+
 static pa_usec_t sink_get_latency(struct userdata *u) {
     pa_usec_t r = 0;
     snd_pcm_status_t *status;
@@ -373,13 +396,15 @@ static pa_usec_t sink_get_latency(struct userdata *u) {
     pa_assert(u);
     pa_assert(u->pcm_handle);
 
-    if ((err = snd_pcm_status(u->pcm_handle, status)) < 0)
-        pa_log("Failed to get delay: %s", snd_strerror(err));
-    else
-        frames = snd_pcm_status_get_delay(status);
+    if (sink_get_latency_by_timestamps(u, &r) < 0) {
+        if ((err = snd_pcm_status(u->pcm_handle, status)) < 0)
+            pa_log("Failed to get delay: %s", snd_strerror(err));
+        else
+            frames = snd_pcm_status_get_delay(status);
 
-    if (frames > 0)
-        r = pa_bytes_to_usec(frames * u->frame_size, &u->sink->sample_spec);
+        if (frames > 0)
+            r = pa_bytes_to_usec(frames * u->frame_size, &u->sink->sample_spec);
+    }
 
     if (u->memchunk.memblock)
         r += pa_bytes_to_usec(u->memchunk.length, &u->sink->sample_spec);
diff --git a/src/modules/alsa/module-alsa-source-old.c b/src/modules/alsa/module-alsa-source-old.c
index 9c24664..0e08cb8 100644
--- a/src/modules/alsa/module-alsa-source-old.c
+++ b/src/modules/alsa/module-alsa-source-old.c
@@ -35,6 +35,7 @@
 
 #include <pulse/xmalloc.h>
 #include <pulse/util.h>
+#include <pulse/timeval.h>
 
 #include <pulsecore/core-error.h>
 #include <pulsecore/core.h>
@@ -50,6 +51,7 @@
 #include <pulsecore/core-error.h>
 #include <pulsecore/thread-mq.h>
 #include <pulsecore/rtpoll.h>
+#include <pulsecore/rtclock.h>
 
 #include "alsa-util.h"
 #include "module-alsa-source-old-symdef.h"
@@ -364,6 +366,25 @@ static int unix_read(struct userdata *u) {
     }
 }
 
+static int source_get_latency_by_timestamps(struct userdata *u, pa_usec_t *d) {
+    snd_pcm_uframes_t avail;
+    snd_htimestamp_t tstamp;
+    struct timeval tv_now;
+    struct timespec ts_dma;
+
+    if (snd_pcm_htimestamp(u->pcm_handle, &avail, &tstamp) < 0) 
+        return -1;
+
+    pa_rtclock_get(&tv_now);
+
+    ts_dma.tv_sec = tstamp.tv_sec;
+    ts_dma.tv_nsec = tstamp.tv_nsec;
+
+    *d = pa_timeval_load(&tv_now) - pa_timespec_load(&ts_dma);
+
+    return 0;
+}
+
 static pa_usec_t source_get_latency(struct userdata *u) {
     pa_usec_t r = 0;
     snd_pcm_status_t *status;
@@ -375,13 +396,15 @@ static pa_usec_t source_get_latency(struct userdata *u) {
     pa_assert(u);
     pa_assert(u->pcm_handle);
 
-    if ((err = snd_pcm_status(u->pcm_handle, status)) < 0)
-        pa_log("Failed to get delay: %s", snd_strerror(err));
-    else
-        frames = snd_pcm_status_get_delay(status);
+    if (source_get_latency_by_timestamps(u, &r) < 0) {
+        if ((err = snd_pcm_status(u->pcm_handle, status)) < 0)
+            pa_log("Failed to get delay: %s", snd_strerror(err));
+        else
+            frames = snd_pcm_status_get_delay(status);
 
-    if (frames > 0)
-        r = pa_bytes_to_usec(frames * u->frame_size, &u->source->sample_spec);
+        if (frames > 0)
+            r = pa_bytes_to_usec(frames * u->frame_size, &u->source->sample_spec);
+    }
 
     return r;
 }
-- 
1.5.6.3

