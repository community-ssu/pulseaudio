From 6c5fdcea40eed54fe9bf69381526099223a8a9bc Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Juho=20H=C3=A4m=C3=A4l=C3=A4inen?= <ext-juho.hamalainen@nokia.com>
Date: Wed, 7 Oct 2009 13:50:36 +0300
Subject: [PATCH] stream-restore: save individual values for role routes

---
 src/modules/module-stream-restore.c |  143 ++++++++++++++++++++++++++---------
 1 files changed, 107 insertions(+), 36 deletions(-)

diff --git a/src/modules/module-stream-restore.c b/src/modules/module-stream-restore.c
index ec1f255..fafa1c3 100644
--- a/src/modules/module-stream-restore.c
+++ b/src/modules/module-stream-restore.c
@@ -80,6 +80,13 @@ static const char* const valid_modargs[] = {
     NULL
 };
 
+struct route_volume {
+    pa_cvolume volume;
+    pa_cvolume min_volume;
+    pa_cvolume default_volume;
+    pa_bool_t reset_min_volume;
+};
+
 struct userdata {
     pa_core *core;
     pa_module *module;
@@ -103,7 +110,8 @@ struct userdata {
     pa_hook_slot *sink_proplist_changed_slot;
     pa_database *route_database;
     char *route;
-    pa_cvolume route_volume;
+    struct route_volume media_route;
+    struct route_volume phone_route;
 };
 
 #define ENTRY_VERSION 4
@@ -118,11 +126,12 @@ struct entry {
     char device[PA_NAME_MAX];
 } PA_GCC_PACKED;
 
-#define ROUTE_ENTRY_VERSION 1
+#define ROUTE_ENTRY_VERSION 2
 
 struct route_entry {
     uint8_t version;
-    pa_cvolume volume;
+    pa_cvolume media_volume;
+    pa_cvolume phone_volume;
 } PA_GCC_PACKED;
 
 enum {
@@ -139,17 +148,16 @@ static pa_bool_t entries_equal(const struct entry *a, const struct entry *b);
 static void trigger_save(struct userdata *u);
 static void apply_entry(struct userdata *u, const char *name, struct entry *e);
 
-static int _ignore_rule_hack(const char *name) {
-    pa_assert(name);
 
-    /* we only update maemo and phone volume */
-    return !(pa_streq(name, "sink-input-by-media-role:x-maemo") || pa_streq(name, "sink-input-by-media-role:phone") || pa_streq(name, "x-maemo"));
+/* we only update media and phone volume */
+static int _role_media(const char *name) {
+    pa_assert(name);
+    return pa_streq(name, "sink-input-by-media-role:x-maemo") || pa_streq(name, "x-maemo");
+}
 
-    return
-        pa_streq(name, "x-maemo-hildon-notify") ||
-        pa_streq(name, "x-maemo-touchscreen-pressed") ||
-        pa_streq(name, "sink-input-by-media-role:animation") ||
-        pa_streq(name, "x-maemo-key-pressed");
+static int _role_phone(const char *name) {
+    pa_assert(name);
+    return pa_streq(name, "sink-input-by-media-role:phone");
 }
 
 static struct route_entry* read_route_entry(struct userdata *u, const char *route) {
@@ -181,7 +189,7 @@ static struct route_entry* read_route_entry(struct userdata *u, const char *rout
         goto fail;
     }
 
-    if (!pa_cvolume_valid(&e->volume)) {
+    if (!pa_cvolume_valid(&e->media_volume) || !pa_cvolume_valid(&e->phone_volume)) {
         pa_log_warn("Invalid volume stored in database for route %s", route);
         goto fail;
     }
@@ -206,7 +214,10 @@ static void route_set_role_volume(struct userdata *u, const char *name) {
         entry = *old;
 
     pa_channel_map_init_mono(&entry.channel_map);
-    pa_cvolume_set(&entry.volume, 1, u->route_volume.values[0]);
+    if (_role_media(name))
+        pa_cvolume_set(&entry.volume, 1, u->media_route.volume.values[0]);
+    else if (_role_phone(name))
+        pa_cvolume_set(&entry.volume, 1, u->phone_route.volume.values[0]);
     entry.volume_valid = TRUE;
 
     if (old) {
@@ -225,8 +236,7 @@ static void route_set_role_volume(struct userdata *u, const char *name) {
     data.data = (void*) &entry;
     data.size = sizeof(entry);
 
-    pa_log_info("Storing volume/mute/device for stream %s.", name);
-
+    pa_log_info("Storing route volume/mute/device for stream %s.", name);
     pa_database_set(u->database, &key, &data, TRUE);
 
     apply_entry(u, name, &entry);
@@ -241,7 +251,8 @@ static pa_hook_result_t sink_proplist_changed_hook_callback(pa_core *c, pa_sink
     pa_assert(s);
 
     route = pa_proplist_gets(s->proplist, "x-maemo.mode");
-    if (!route || (u->route && pa_streq(route, u->route)))
+    /*if (!route || (u->route && pa_streq(route, u->route))) */
+    if (!route)
         return PA_HOOK_OK;
 
     pa_xfree(u->route);
@@ -256,12 +267,29 @@ static pa_hook_result_t sink_proplist_changed_hook_callback(pa_core *c, pa_sink
     /* instead, let's restore our 2 base roles: x-maemo and phone */
 
     e = read_route_entry(u, u->route);
-    if (!e || !pa_cvolume_valid(&e->volume))
-        pa_cvolume_scale(&u->route_volume, pa_sw_volume_from_dB(-20));
-    else
-        u->route_volume = e->volume;
 
-    pa_log_debug("Updated route %s volume=%s", route, pa_cvolume_snprint(t, sizeof(t), &u->route_volume));
+    if (!e) {
+        u->media_route.volume = u->media_route.default_volume;
+        u->phone_route.volume = u->phone_route.default_volume;
+    } else {
+        if (!pa_cvolume_valid(&e->media_volume))
+            u->media_route.volume = u->media_route.default_volume;
+        else
+            u->media_route.volume = e->media_volume;
+
+        if (!pa_cvolume_valid(&e->phone_volume))
+            u->phone_route.volume = u->phone_route.default_volume;
+        /* if phone volume too low, restore defined minimum value */
+        else if (u->phone_route.reset_min_volume && e->phone_volume.values[0] < u->phone_route.min_volume.values[0]) {
+            pa_log_debug("phone volume too low, reset to %s.", pa_cvolume_snprint(t, sizeof(t), &u->phone_route.default_volume));
+            u->phone_route.volume = u->phone_route.default_volume;
+        }
+        else
+            u->phone_route.volume = e->phone_volume;
+    }
+
+    pa_log_debug("Updated media %s volume=%s", route, pa_cvolume_snprint(t, sizeof(t), &u->media_route.volume));
+    pa_log_debug("Updated phone %s volume=%s", route, pa_cvolume_snprint(t, sizeof(t), &u->phone_route.volume));
 
     route_set_role_volume(u, "sink-input-by-media-role:x-maemo");
     route_set_role_volume(u, "sink-input-by-media-role:phone");
@@ -393,15 +421,15 @@ static void trigger_save(struct userdata *u) {
     if (!u->route)
         goto end;
 
-    if (pa_cvolume_valid(&u->route_volume)) {
+    if (pa_cvolume_valid(&u->media_route.volume) || pa_cvolume_valid(&u->phone_route.volume)) {
         struct route_entry entry;
         pa_datum key, data;
         char t[256];
 
         memset(&entry, 0, sizeof(entry));
         entry.version = ROUTE_ENTRY_VERSION;
-        entry.volume = u->route_volume;
-        pa_log_debug("Route %s volume=%s", u->route, pa_cvolume_snprint(t, sizeof(t), &u->route_volume));
+        entry.media_volume = u->media_route.volume;
+        entry.phone_volume = u->phone_route.volume;
 
         key.data = (void*) u->route;
         key.size = (int) strlen(u->route);
@@ -410,6 +438,9 @@ static void trigger_save(struct userdata *u) {
         data.size = sizeof(entry);
 
         pa_database_set(u->route_database, &key, &data, TRUE);
+
+        pa_log_debug("Media route %s volume=%s", u->route, pa_cvolume_snprint(t, sizeof(t), &u->media_route.volume));
+        pa_log_debug("Phone route %s volume=%s", u->route, pa_cvolume_snprint(t, sizeof(t), &u->phone_route.volume));
     }
 
 end:
@@ -522,8 +553,12 @@ static void subscribe_callback(pa_core *c, pa_subscription_event_type_t t, uint3
         pa_xfree(old);
     }
 
-    if (!_ignore_rule_hack(name) && pa_cvolume_valid(&entry.volume))
-        u->route_volume = entry.volume;
+    if (pa_cvolume_valid(&entry.volume)) {
+        if (_role_media(name))
+            u->media_route.volume = entry.volume;
+        else if (_role_phone(name))
+            u->phone_route.volume = entry.volume;
+    }
 
     key.data = name;
     key.size = (int) strlen(name);
@@ -680,7 +715,7 @@ static int fill_db(struct userdata *u, const char *filename) {
 
     while (!feof(f)) {
         char ln[256];
-        char *d, *v;
+        char *d, *v, *min;
         double db;
 
         if (!fgets(ln, sizeof(ln), f))
@@ -695,6 +730,10 @@ static int fill_db(struct userdata *u, const char *filename) {
 
         d = ln+strcspn(ln, WHITESPACE);
         v = d+strspn(d, WHITESPACE);
+        d[0] = '\0';
+        d = v+strcspn(v, WHITESPACE);
+        min = d+strspn(d, WHITESPACE);
+        d[0] = '\0';
 
         if (!*v) {
             pa_log(__FILE__ ": [%s:%u] failed to parse line - too few words", filename, n);
@@ -720,12 +759,31 @@ static int fill_db(struct userdata *u, const char *filename) {
             data.data = (void*) &e;
             data.size = sizeof(e);
 
-            if (!_ignore_rule_hack(ln) && pa_cvolume_valid(&e.volume))
-                u->route_volume = e.volume;
+            if (pa_cvolume_valid(&e.volume)) {
+                if (_role_media(ln)) {
+                    u->media_route.volume = e.volume;
+                    u->media_route.default_volume = e.volume;
+                } else if (_role_phone(ln)) {
+                    u->phone_route.volume = e.volume;
+                    u->phone_route.default_volume = e.volume;
+                }
+            }
 
-            if (pa_database_set(u->database, &key, &data, TRUE) == 0)
+            /* save default volume only if it doesn't exist in database yet. */
+            if (pa_database_set(u->database, &key, &data, FALSE) == 0)
                 pa_log_debug("Setting %s to %fdb", ln, db);
         }
+
+        if (_role_phone(ln)) {
+            if (*min) {
+                if (pa_atod(min, &db) >= 0) {
+                    pa_cvolume_set(&u->phone_route.min_volume, 1, pa_sw_volume_from_dB(db));
+                    u->phone_route.reset_min_volume = TRUE;
+                    pa_log_debug("Setting %s minimum value to %fdb", ln, db);
+                }
+            }
+        }
+
     }
 
     trigger_save(u);
@@ -984,8 +1042,12 @@ static int extension_cb(pa_native_protocol *p, pa_module *m, pa_native_connectio
                     !pa_namereg_is_valid_name(entry.device))
                     goto fail;
 
-                if (!_ignore_rule_hack(name) && pa_cvolume_valid(&entry.volume))
-                    u->route_volume = entry.volume;
+                if (pa_cvolume_valid(&entry.volume)) {
+                    if (_role_media(name))
+                        u->media_route.volume = entry.volume;
+                    else if (_role_phone(name))
+                        u->phone_route.volume = entry.volume;
+                }
 
                 key.data = (void*) name;
                 key.size = (int) strlen(name);
@@ -1098,7 +1160,16 @@ int pa__init(pa_module*m) {
     u->restore_volume = restore_volume;
     u->restore_muted = restore_muted;
     u->restore_route_volume = restore_route_volume;
-    pa_cvolume_init(&u->route_volume);
+    pa_cvolume_init(&u->media_route.volume);
+    pa_cvolume_init(&u->media_route.min_volume);
+    pa_cvolume_init(&u->media_route.default_volume);
+    pa_cvolume_init(&u->phone_route.volume);
+    pa_cvolume_init(&u->phone_route.min_volume);
+    pa_cvolume_init(&u->phone_route.default_volume);
+    u->media_route.reset_min_volume = FALSE;
+    u->phone_route.reset_min_volume = FALSE;
+    pa_cvolume_set(&u->media_route.default_volume, 1, pa_sw_volume_from_dB(-20));
+    pa_cvolume_set(&u->phone_route.default_volume, 1, pa_sw_volume_from_dB(-20));
 
     u->database = NULL;
     u->subscribed = pa_idxset_new(pa_idxset_trivial_hash_func, pa_idxset_trivial_compare_func);
@@ -1126,7 +1197,7 @@ int pa__init(pa_module*m) {
      * files are CPU dependant, and we don't want things to go wrong
      * if we are on a multiarch system. */
 
-    fn = pa_sprintf_malloc("stream-volumes."CANONICAL_HOST".bin");
+    fn = pa_sprintf_malloc("stream-volumes");
     fname = pa_state_path(fn, TRUE);
     pa_xfree(fn);
 
@@ -1145,7 +1216,7 @@ int pa__init(pa_module*m) {
     if (fill_db(u, pa_modargs_get_value(ma, "fallback_table", NULL)) < 0)
         goto fail;
 
-    fn = pa_sprintf_malloc("x-maemo-route-volumes."CANONICAL_HOST".bin");
+    fn = pa_sprintf_malloc("x-maemo-route-volumes");
     fname = pa_state_path(fn, TRUE);
     pa_xfree(fn);
 
-- 
1.6.0.4

