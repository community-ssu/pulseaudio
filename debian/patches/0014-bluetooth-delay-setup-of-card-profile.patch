From 3a11ece3af5a531f157ebc6381e984bb974097bc Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Marc-Andr=C3=A9=20Lureau?= <marc-andre.lureau@nokia.com>
Date: Tue, 24 Mar 2009 15:34:33 +0200
Subject: [PATCH 14/32] bluetooth: delay setup of card/profile

---
 src/modules/bluetooth/module-bluetooth-device.c   |   57 ++++++++++++++++----
 src/modules/bluetooth/module-bluetooth-discover.c |    2 +-
 2 files changed, 46 insertions(+), 13 deletions(-)

diff --git a/src/modules/bluetooth/module-bluetooth-device.c b/src/modules/bluetooth/module-bluetooth-device.c
index 4fd40e4..d25f487 100644
--- a/src/modules/bluetooth/module-bluetooth-device.c
+++ b/src/modules/bluetooth/module-bluetooth-device.c
@@ -137,6 +137,7 @@ struct userdata {
 
     pa_dbus_connection *connection;
 
+    pa_time_event *ev;
     pa_card *card;
     pa_sink *sink;
     pa_source *source;
@@ -1908,11 +1909,40 @@ static int setup_dbus(struct userdata *u) {
     return 0;
 }
 
+static int setup_card_and_start(struct userdata *u, const char *profile) {
+    pa_assert(u);
+
+    if (add_card(u, profile, u->device) < 0)
+        return -1;
+
+    if (u->profile != PROFILE_OFF)
+        if (init_profile(u) < 0)
+            return -1;
+
+    if (u->sink || u->source)
+        if (start_thread(u) < 0)
+            return -1;
+
+    return 0;
+}
+
+static void handle_time_event(pa_mainloop_api *ea, pa_time_event* ev, const struct timeval *tv, void *userdata) {
+    struct userdata *u = userdata;
+
+    pa_assert(u);
+    ea->time_restart(ev, NULL);
+
+    pa_log_debug("Delayed card and profile startup...");
+
+    if (setup_card_and_start(u, NULL) < 0)
+        pa_module_unload_request(u->module, TRUE);
+}
+
 int pa__init(pa_module* m) {
     pa_modargs *ma;
     uint32_t channels;
     struct userdata *u;
-    const char *address, *path;
+    const char *address, *path, *profile;
     pa_bluetooth_discovery *y = NULL;
     DBusError err;
     char *mike, *speaker;
@@ -1977,13 +2007,21 @@ int pa__init(pa_module* m) {
         goto fail;
 
     /* Add the card structure. This will also initialize the default profile */
-    if (add_card(u, pa_modargs_get_value(ma, "profile", NULL), u->device) < 0)
-        goto fail;
+    if ((profile = pa_modargs_get_value(ma, "profile", NULL)) != NULL) {
+        if (setup_card_and_start(u, profile) < 0)
+            goto fail;
+    } else {
+        struct timeval tv;
+
+        pa_gettimeofday(&tv);
+        pa_timeval_add(&tv, (pa_usec_t) PA_USEC_PER_SEC * 1);
+        u->ev = u->core->mainloop->time_new(u->core->mainloop, &tv, handle_time_event, u);
+    }
 
     pa_bluetooth_discovery_unref(y);
     y = NULL;
 
-    /* Connect to the BT service and query capabilities */
+    /* Connect to the BT service */
     if (init_bt(u) < 0)
         goto fail;
 
@@ -2011,14 +2049,6 @@ int pa__init(pa_module* m) {
     pa_xfree(speaker);
     pa_xfree(mike);
 
-    if (u->profile != PROFILE_OFF)
-        if (init_profile(u) < 0)
-            goto fail;
-
-    if (u->sink || u->source)
-        if (start_thread(u) < 0)
-            goto fail;
-
     return 0;
 
 fail:
@@ -2051,6 +2081,9 @@ void pa__done(pa_module *m) {
     if (!(u = m->userdata))
         return;
 
+    if (u->ev)
+        u->core->mainloop->time_free(u->ev);
+
     if (u->sink
 #ifdef NOKIA
         && !USE_SCO_OVER_PCM(u)
diff --git a/src/modules/bluetooth/module-bluetooth-discover.c b/src/modules/bluetooth/module-bluetooth-discover.c
index 3a7b20b..2724bb6 100644
--- a/src/modules/bluetooth/module-bluetooth-discover.c
+++ b/src/modules/bluetooth/module-bluetooth-discover.c
@@ -91,7 +91,7 @@ static pa_hook_result_t load_module_for_device(pa_bluetooth_discovery *y, const
 
             /* Oh, awesome, a new device has shown up and been connected! */
 
-            args = pa_sprintf_malloc("address=\"%s\" path=\"%s\" profile=\"%s\"", d->address, d->path, d->headset_connected > 0 ? "hsp" : "a2dp");
+            args = pa_sprintf_malloc("address=\"%s\" path=\"%s\"", d->address, d->path);
 
 #ifdef NOKIA
             if (pa_modargs_get_value(u->modargs, "sco_sink", NULL) &&
-- 
1.6.2.rc1.13.gfd76c.dirty

