From 5d6b343dc06819de026e15ff2c40e5cfab5c56e9 Mon Sep 17 00:00:00 2001
From: Jyri Sarha <jyri.sarha@nokia.com>
Date: Fri, 11 Sep 2009 15:21:48 +0300
Subject: [PATCH] bluetooth: Add bluetooth HSP auto connect functionality

---
 src/modules/bluetooth/module-bluetooth-discover.c |   75 +++++++++++----------
 1 files changed, 38 insertions(+), 37 deletions(-)

diff --git a/src/modules/bluetooth/module-bluetooth-discover.c b/src/modules/bluetooth/module-bluetooth-discover.c
index 788fee0..cea73f8 100644
--- a/src/modules/bluetooth/module-bluetooth-discover.c
+++ b/src/modules/bluetooth/module-bluetooth-discover.c
@@ -52,6 +52,8 @@ PA_MODULE_LOAD_ONCE(TRUE);
 #endif
 */
 
+#define PA_PROP_BLUETOOTH_HSP_AUTO_CONNECT "bluetooth.hsp.auto.connect"
+
 static const char* const valid_modargs[] = {
 #ifdef NOKIA
     "sco_sink",
@@ -83,53 +85,52 @@ static pa_hook_result_t load_module_for_device(pa_bluetooth_discovery *y, const
 
     mi = pa_hashmap_get(u->hashmap, d->path);
 
-    if (!d->dead &&
-        d->device_connected > 0 && d->audio_state >= PA_BT_AUDIO_STATE_CONNECTED) {
+    if (!d->dead && d->device_connected > 0) {
+        char *auto_hsp = "";
 
-        if (!mi) {
-            pa_module *m = NULL;
-            char *args;
+        /* This is in case we have to use hsp immediately, without waiting for .Audio.State = Connected */
+        if (d->headset_state >= PA_BT_AUDIO_STATE_CONNECTED &&
+            pa_parse_boolean(pa_strnull(pa_proplist_gets(u->module->proplist, PA_PROP_BLUETOOTH_HSP_AUTO_CONNECT)))) {
+            auto_hsp = " profile=\"hsp\"";
+        }
 
-            /* Oh, awesome, a new device has shown up and been connected! */
+        if (d->audio_state >= PA_BT_AUDIO_STATE_CONNECTED || strlen(auto_hsp) > 0) {
 
-            args = pa_sprintf_malloc("address=\"%s\" path=\"%s\"", d->address, d->path);
-#if 0
-            /* This is in case we have to use hsp immediately, without waiting for .Audio.State = Connected */
-            if (d->headset_state >= PA_BT_AUDIO_STATE_CONNECTED && somecondition) {
-                char *tmp;
-                tmp = pa_sprintf_malloc("%s profile=\"hsp\"", args);
-                pa_xfree(args);
-                args = tmp;
-            }
-#endif
+            if (!mi) {
+                pa_module *m = NULL;
+                char *args;
 
-#ifdef NOKIA
-            if (pa_modargs_get_value(u->modargs, "sco_sink", NULL) &&
-                pa_modargs_get_value(u->modargs, "sco_source", NULL)) {
-                char *tmp;
+                /* Oh, awesome, a new device has shown up and been connected! */
 
-                tmp = pa_sprintf_malloc("%s sco_sink=\"%s\" sco_source=\"%s\"", args,
-                                        pa_modargs_get_value(u->modargs, "sco_sink", NULL),
-                                        pa_modargs_get_value(u->modargs, "sco_source", NULL));
-                pa_xfree(args);
-                args = tmp;
-            }
+                args = pa_sprintf_malloc("address=\"%s\" path=\"%s\"%s", d->address, d->path, auto_hsp);
+
+#ifdef NOKIA
+                if (pa_modargs_get_value(u->modargs, "sco_sink", NULL) &&
+                    pa_modargs_get_value(u->modargs, "sco_source", NULL)) {
+                    char *tmp;
+
+                    tmp = pa_sprintf_malloc("%s sco_sink=\"%s\" sco_source=\"%s\"", args,
+                                            pa_modargs_get_value(u->modargs, "sco_sink", NULL),
+                                            pa_modargs_get_value(u->modargs, "sco_source", NULL));
+                    pa_xfree(args);
+                    args = tmp;
+                }
 #endif
 
-            pa_log_debug("Loading module-bluetooth-device %s", args);
-            m = pa_module_load(u->module->core, "module-bluetooth-device", args);
-            pa_xfree(args);
+                pa_log_debug("Loading module-bluetooth-device %s", args);
+                m = pa_module_load(u->module->core, "module-bluetooth-device", args);
+                pa_xfree(args);
 
-            if (m) {
-                mi = pa_xnew(struct module_info, 1);
-                mi->module = m->index;
-                mi->path = pa_xstrdup(d->path);
+                if (m) {
+                    mi = pa_xnew(struct module_info, 1);
+                    mi->module = m->index;
+                    mi->path = pa_xstrdup(d->path);
 
-                pa_hashmap_put(u->hashmap, mi->path, mi);
-            } else
-                pa_log_debug("Failed to load module for device %s", d->path);
+                    pa_hashmap_put(u->hashmap, mi->path, mi);
+                } else
+                    pa_log_debug("Failed to load module for device %s", d->path);
+            }
         }
-
     } else {
 
         if (mi) {
-- 
1.6.0.4

