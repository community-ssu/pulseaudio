From 8da89d447f6d209451f16d61868a7ae0cb8a80f3 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Marc-Andr=C3=A9=20Lureau?= <marc-andre.lureau@nokia.com>
Date: Mon, 13 Jul 2009 15:46:12 +0300
Subject: [PATCH 74/82] flat-sink: sync sink volume with io thread recursively

Also, get rid of PA_SINK_MESSAGE_SYNC_VOLUMES in a context where
intermediate sink are not ready (while moving, asycmsgq is NULL)

This revert patch from Jyri, 0aeac53.
---
 src/pulsecore/sink.c |  143 +++++++++++++++++++++++++++++--------------------
 src/pulsecore/sink.h |    1 +
 2 files changed, 86 insertions(+), 58 deletions(-)

diff --git a/src/pulsecore/sink.c b/src/pulsecore/sink.c
index f8c5d27..5349046 100644
--- a/src/pulsecore/sink.c
+++ b/src/pulsecore/sink.c
@@ -1094,7 +1094,6 @@ static void update_input_soft_volume(pa_sink *s, const pa_cvolume *new_volume, c
          * update, hence we do it within the pa_sink_set_volume() call
          * below */
     }
-    pa_assert_se(pa_asyncmsgq_send(s->asyncmsgq, PA_MSGOBJECT(s), PA_SINK_MESSAGE_SYNC_VOLUMES, NULL, 0, NULL) == 0);
 }
 
 /* Called from main thread */
@@ -1221,86 +1220,82 @@ void pa_sink_propagate_flat_volume(pa_sink *s) {
     propagate_flat_volume(s, s);
 }
 
-static void post_virtual_volume_changed(pa_sink *s) {
-    pa_cvolume new_virtual_volume;
+static pa_bool_t sink_set_volume(pa_sink *s, const pa_cvolume *v, const pa_channel_map *channel_map, pa_bool_t become_reference) {
+    pa_cvolume volume;
+    pa_bool_t virtual_volume_changed;
     pa_sink_input *i;
     uint32_t idx;
 
-    pa_subscription_post(s->core, PA_SUBSCRIPTION_EVENT_SINK|PA_SUBSCRIPTION_EVENT_CHANGE, s->index);
+    pa_sink_assert_ref(s);
+    pa_assert(PA_SINK_IS_LINKED(s->state));
+    pa_assert(v);
+    pa_assert(channel_map);
+    pa_assert(pa_cvolume_valid(v));
+
+    volume = *v;
+    pa_cvolume_remap(&volume, channel_map, &s->channel_map);
+
+    virtual_volume_changed = !pa_cvolume_equal(&volume, &s->virtual_volume);
+    s->virtual_volume = volume;
+
+    if (s->flat_volume_sink)
+        /* flatten sink have same virtual volume as their master sink
+         * but no soft volume */
+        pa_cvolume_reset(&s->soft_volume, s->sample_spec.channels);
+
+    if (become_reference)
+        s->reference_volume = s->virtual_volume;
+
+    if (virtual_volume_changed)
+        pa_subscription_post(s->core, PA_SUBSCRIPTION_EVENT_SINK|PA_SUBSCRIPTION_EVENT_CHANGE, s->index);
 
     if (!(s->flags & PA_SINK_FLAT_VOLUME))
-        return;
+        return virtual_volume_changed;
 
     for (i = PA_SINK_INPUT(pa_idxset_first(s->inputs, &idx)); i; i = PA_SINK_INPUT(pa_idxset_next(s->inputs, &idx))) {
         if (!i->origin_sink)
             continue;
-
-        new_virtual_volume = s->virtual_volume;
-        pa_cvolume_remap(&new_virtual_volume, &s->channel_map, &i->origin_sink->channel_map);
-
-        if (!pa_cvolume_equal(&new_virtual_volume, &i->origin_sink->virtual_volume)) {
-            i->origin_sink->virtual_volume = new_virtual_volume;
-            post_virtual_volume_changed(i->origin_sink);
-        }
+        /* go recursively on slaved flatten sink
+         * and ignore this intermediate sink-input. */
+        virtual_volume_changed |= sink_set_volume(i->origin_sink, v, channel_map, become_reference);
     }
+
+    return virtual_volume_changed;
 }
 
 /* Called from main thread */
 void pa_sink_set_volume(pa_sink *s, const pa_cvolume *volume, pa_bool_t propagate, pa_bool_t sendmsg, pa_bool_t become_reference) {
-    pa_bool_t virtual_volume_changed;
-
     pa_sink_assert_ref(s);
     pa_assert(PA_SINK_IS_LINKED(s->state));
     pa_assert(volume);
     pa_assert(pa_cvolume_valid(volume));
     pa_assert(pa_cvolume_compatible(volume, &s->sample_spec));
 
-    virtual_volume_changed = !pa_cvolume_equal(volume, &s->virtual_volume);
-
-    if (s->flat_volume_sink) {
-        pa_cvolume remapped;
-
-        remapped = *volume;
-        /* maybe we can pass original channel map, to not loose information? */
-        pa_cvolume_remap(&remapped, &s->channel_map, &s->flat_volume_sink->channel_map);
-        pa_sink_set_volume(s->flat_volume_sink, &remapped, propagate, sendmsg, become_reference);
-    }
-
-    s->virtual_volume = *volume;
-
-    if (become_reference)
-        s->reference_volume = s->virtual_volume;
-
-    if (!s->flat_volume_sink) {
-        /* Propagate this volume change back to the inputs */
-        if (virtual_volume_changed)
-            if (propagate && (s->flags & PA_SINK_FLAT_VOLUME))
-                pa_sink_propagate_flat_volume(s);
+    /* go to the root-sink of the sinks, beware volume is not remapped */
+    while (s->flat_volume_sink)
+        s = s->flat_volume_sink;
 
-        if (s->set_volume) {
-            /* If we have a function set_volume(), then we do not apply a
-             * soft volume by default. However, set_volume() is apply one
-             * to s->soft_volume */
+    /* Propagate this volume change back to the inputs */
+    if (sink_set_volume(s, volume, &s->channel_map, become_reference))
+        if (propagate && (s->flags & PA_SINK_FLAT_VOLUME))
+            pa_sink_propagate_flat_volume(s);
 
-            pa_cvolume_reset(&s->soft_volume, s->sample_spec.channels);
-            s->set_volume(s);
+    if (s->set_volume) {
+        /* If we have a function set_volume(), then we do not apply a
+         * soft volume by default. However, set_volume() is apply one
+         * to s->soft_volume */
 
-        } else
-            /* If we have no function set_volume(), then the soft volume
-             * becomes the virtual volume */
-            s->soft_volume = s->virtual_volume;
-    } else {
-        /* flatten sink have same virtual volume as their master sink
-         * but no soft volume */
         pa_cvolume_reset(&s->soft_volume, s->sample_spec.channels);
-    }
+        s->set_volume(s);
+
+    } else
+        /* If we have no function set_volume(), then the soft volume
+         * becomes the virtual volume */
+        s->soft_volume = s->virtual_volume;
 
     /* This tells the sink that soft and/or virtual volume changed */
     if (sendmsg)
-        pa_assert_se(pa_asyncmsgq_send(s->asyncmsgq, PA_MSGOBJECT(s), PA_SINK_MESSAGE_SET_VOLUME, NULL, 0, NULL) == 0);
-
-    if (virtual_volume_changed)
-        post_virtual_volume_changed(s);
+        pa_assert_se(pa_asyncmsgq_send(s->asyncmsgq, PA_MSGOBJECT(s), PA_SINK_MESSAGE_SET_VOLUME_FLAT_SINK, NULL, 0, NULL) == 0);
 }
 
 /* Called from main thread. Only to be called by sink implementor */
@@ -1542,6 +1537,30 @@ static void sync_input_volumes_within_thread(pa_sink *s) {
     }
 }
 
+/* Called from the IO thread */
+static void set_sink_volume_within_thread(pa_sink *s) {
+    pa_sink_input *i;
+    void *state = NULL;
+
+    pa_sink_assert_ref(s);
+
+    while ((i = PA_SINK_INPUT(pa_hashmap_iterate(s->thread_info.inputs, &state, NULL))))
+        if (i->origin_sink)
+            set_sink_volume_within_thread(i->origin_sink);
+
+    PA_MSGOBJECT(s)->process_msg(PA_MSGOBJECT(s), PA_SINK_MESSAGE_SET_VOLUME, NULL, 0, NULL);
+}
+
+/* Called from the IO thread */
+static void set_sink_volume_flat_sink_within_thread(pa_sink *s) {
+    pa_sink_assert_ref(s);
+
+    while (s->flat_volume_sink)
+        s = s->flat_volume_sink;
+
+    PA_MSGOBJECT(s)->process_msg(PA_MSGOBJECT(s), PA_SINK_MESSAGE_SET_VOLUME_FLAT_SINK, NULL, 0, NULL);
+}
+
 /* Called from IO thread, except when it is not */
 int pa_sink_process_msg(pa_msgobject *o, int code, void *userdata, int64_t offset, pa_memchunk *chunk) {
     pa_sink *s = PA_SINK(o);
@@ -1598,7 +1617,8 @@ int pa_sink_process_msg(pa_msgobject *o, int code, void *userdata, int64_t offse
 
             /* In flat volume mode we need to update the volume as
              * well */
-            return o->process_msg(o, PA_SINK_MESSAGE_SET_VOLUME, NULL, 0, NULL);
+            set_sink_volume_flat_sink_within_thread(s);
+            return 0;
         }
 
         case PA_SINK_MESSAGE_REMOVE_INPUT: {
@@ -1641,7 +1661,8 @@ int pa_sink_process_msg(pa_msgobject *o, int code, void *userdata, int64_t offse
 
             /* In flat volume mode we need to update the volume as
              * well */
-            return o->process_msg(o, PA_SINK_MESSAGE_SET_VOLUME, NULL, 0, NULL);
+            set_sink_volume_flat_sink_within_thread(s);
+            return 0;
         }
 
         case PA_SINK_MESSAGE_START_MOVE: {
@@ -1689,7 +1710,8 @@ int pa_sink_process_msg(pa_msgobject *o, int code, void *userdata, int64_t offse
 
             /* In flat volume mode we need to update the volume as
              * well */
-            return o->process_msg(o, PA_SINK_MESSAGE_SET_VOLUME, NULL, 0, NULL);
+            set_sink_volume_flat_sink_within_thread(s);
+            return 0;
         }
 
         case PA_SINK_MESSAGE_FINISH_MOVE: {
@@ -1735,9 +1757,14 @@ int pa_sink_process_msg(pa_msgobject *o, int code, void *userdata, int64_t offse
 
             /* In flat volume mode we need to update the volume as
              * well */
-            return o->process_msg(o, PA_SINK_MESSAGE_SET_VOLUME, NULL, 0, NULL);
+            set_sink_volume_flat_sink_within_thread(s);
+            return 0;
         }
 
+        case PA_SINK_MESSAGE_SET_VOLUME_FLAT_SINK:
+            set_sink_volume_within_thread(s);
+            return 0;
+
         case PA_SINK_MESSAGE_SET_VOLUME:
 
             if (!pa_cvolume_equal(&s->thread_info.soft_volume, &s->soft_volume)) {
diff --git a/src/pulsecore/sink.h b/src/pulsecore/sink.h
index c628c21..5c7bc33 100644
--- a/src/pulsecore/sink.h
+++ b/src/pulsecore/sink.h
@@ -165,6 +165,7 @@ typedef enum pa_sink_message {
     PA_SINK_MESSAGE_REMOVE_INPUT,
     PA_SINK_MESSAGE_GET_VOLUME,
     PA_SINK_MESSAGE_SET_VOLUME,
+    PA_SINK_MESSAGE_SET_VOLUME_FLAT_SINK,
     PA_SINK_MESSAGE_SYNC_VOLUMES,
     PA_SINK_MESSAGE_GET_MUTE,
     PA_SINK_MESSAGE_SET_MUTE,
-- 
1.6.3.3

